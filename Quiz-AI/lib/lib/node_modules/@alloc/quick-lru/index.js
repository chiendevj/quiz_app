'use strict';

function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}
function _toConsumableArray(r) {
  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}
function _arrayWithoutHoles(r) {
  if (Array.isArray(r)) return _arrayLikeToArray(r);
}
function _regeneratorRuntime() {
  "use strict";

  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
  _regeneratorRuntime = function _regeneratorRuntime() {
    return e;
  };
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function define(t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function value(t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(_typeof(e) + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function stop() {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function complete(t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function finish(t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    "catch": function _catch(t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}
function _slicedToArray(r, e) {
  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = !1;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _arrayWithHoles(r) {
  if (Array.isArray(r)) return r;
}
function _createForOfIteratorHelper(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (!t) {
    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
      t && (r = t);
      var _n = 0,
        F = function F() {};
      return {
        s: F,
        n: function n() {
          return _n >= r.length ? {
            done: !0
          } : {
            done: !1,
            value: r[_n++]
          };
        },
        e: function e(r) {
          throw r;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o,
    a = !0,
    u = !1;
  return {
    s: function s() {
      t = t.call(r);
    },
    n: function n() {
      var r = t.next();
      return a = r.done, r;
    },
    e: function e(r) {
      u = !0, o = r;
    },
    f: function f() {
      try {
        a || null == t["return"] || t["return"]();
      } finally {
        if (u) throw o;
      }
    }
  };
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _classCallCheck(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}
function _toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var QuickLRU = /*#__PURE__*/function () {
  function QuickLRU() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, QuickLRU);
    if (!(options.maxSize && options.maxSize > 0)) {
      throw new TypeError('`maxSize` must be a number greater than 0');
    }
    if (typeof options.maxAge === 'number' && options.maxAge === 0) {
      throw new TypeError('`maxAge` must be a number greater than 0');
    }
    this.maxSize = options.maxSize;
    this.maxAge = options.maxAge || Infinity;
    this.onEviction = options.onEviction;
    this.cache = new Map();
    this.oldCache = new Map();
    this._size = 0;
  }
  return _createClass(QuickLRU, [{
    key: "_emitEvictions",
    value: function _emitEvictions(cache) {
      if (typeof this.onEviction !== 'function') {
        return;
      }
      var _iterator = _createForOfIteratorHelper(cache),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
            key = _step$value[0],
            item = _step$value[1];
          this.onEviction(key, item.value);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "_deleteIfExpired",
    value: function _deleteIfExpired(key, item) {
      if (typeof item.expiry === 'number' && item.expiry <= Date.now()) {
        if (typeof this.onEviction === 'function') {
          this.onEviction(key, item.value);
        }
        return this["delete"](key);
      }
      return false;
    }
  }, {
    key: "_getOrDeleteIfExpired",
    value: function _getOrDeleteIfExpired(key, item) {
      var deleted = this._deleteIfExpired(key, item);
      if (deleted === false) {
        return item.value;
      }
    }
  }, {
    key: "_getItemValue",
    value: function _getItemValue(key, item) {
      return item.expiry ? this._getOrDeleteIfExpired(key, item) : item.value;
    }
  }, {
    key: "_peek",
    value: function _peek(key, cache) {
      var item = cache.get(key);
      return this._getItemValue(key, item);
    }
  }, {
    key: "_set",
    value: function _set(key, value) {
      this.cache.set(key, value);
      this._size++;
      if (this._size >= this.maxSize) {
        this._size = 0;
        this._emitEvictions(this.oldCache);
        this.oldCache = this.cache;
        this.cache = new Map();
      }
    }
  }, {
    key: "_moveToRecent",
    value: function _moveToRecent(key, item) {
      this.oldCache["delete"](key);
      this._set(key, item);
    }
  }, {
    key: "_entriesAscending",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function _entriesAscending() {
      var _iterator2, _step2, item, _item, key, value, deleted, _iterator3, _step3, _item2, _item3, _key, _value, _deleted;
      return _regeneratorRuntime().wrap(function _entriesAscending$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _iterator2 = _createForOfIteratorHelper(this.oldCache);
            _context.prev = 1;
            _iterator2.s();
          case 3:
            if ((_step2 = _iterator2.n()).done) {
              _context.next = 13;
              break;
            }
            item = _step2.value;
            _item = _slicedToArray(item, 2), key = _item[0], value = _item[1];
            if (this.cache.has(key)) {
              _context.next = 11;
              break;
            }
            deleted = this._deleteIfExpired(key, value);
            if (!(deleted === false)) {
              _context.next = 11;
              break;
            }
            _context.next = 11;
            return item;
          case 11:
            _context.next = 3;
            break;
          case 13:
            _context.next = 18;
            break;
          case 15:
            _context.prev = 15;
            _context.t0 = _context["catch"](1);
            _iterator2.e(_context.t0);
          case 18:
            _context.prev = 18;
            _iterator2.f();
            return _context.finish(18);
          case 21:
            _iterator3 = _createForOfIteratorHelper(this.cache);
            _context.prev = 22;
            _iterator3.s();
          case 24:
            if ((_step3 = _iterator3.n()).done) {
              _context.next = 33;
              break;
            }
            _item2 = _step3.value;
            _item3 = _slicedToArray(_item2, 2), _key = _item3[0], _value = _item3[1];
            _deleted = this._deleteIfExpired(_key, _value);
            if (!(_deleted === false)) {
              _context.next = 31;
              break;
            }
            _context.next = 31;
            return _item2;
          case 31:
            _context.next = 24;
            break;
          case 33:
            _context.next = 38;
            break;
          case 35:
            _context.prev = 35;
            _context.t1 = _context["catch"](22);
            _iterator3.e(_context.t1);
          case 38:
            _context.prev = 38;
            _iterator3.f();
            return _context.finish(38);
          case 41:
          case "end":
            return _context.stop();
        }
      }, _entriesAscending, this, [[1, 15, 18, 21], [22, 35, 38, 41]]);
    })
  }, {
    key: "get",
    value: function get(key) {
      if (this.cache.has(key)) {
        var item = this.cache.get(key);
        return this._getItemValue(key, item);
      }
      if (this.oldCache.has(key)) {
        var _item4 = this.oldCache.get(key);
        if (this._deleteIfExpired(key, _item4) === false) {
          this._moveToRecent(key, _item4);
          return _item4.value;
        }
      }
    }
  }, {
    key: "set",
    value: function set(key, value) {
      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref$maxAge = _ref.maxAge,
        maxAge = _ref$maxAge === void 0 ? this.maxAge === Infinity ? undefined : Date.now() + this.maxAge : _ref$maxAge;
      if (this.cache.has(key)) {
        this.cache.set(key, {
          value: value,
          maxAge: maxAge
        });
      } else {
        this._set(key, {
          value: value,
          expiry: maxAge
        });
      }
    }
  }, {
    key: "has",
    value: function has(key) {
      if (this.cache.has(key)) {
        return !this._deleteIfExpired(key, this.cache.get(key));
      }
      if (this.oldCache.has(key)) {
        return !this._deleteIfExpired(key, this.oldCache.get(key));
      }
      return false;
    }
  }, {
    key: "peek",
    value: function peek(key) {
      if (this.cache.has(key)) {
        return this._peek(key, this.cache);
      }
      if (this.oldCache.has(key)) {
        return this._peek(key, this.oldCache);
      }
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      var deleted = this.cache["delete"](key);
      if (deleted) {
        this._size--;
      }
      return this.oldCache["delete"](key) || deleted;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.cache.clear();
      this.oldCache.clear();
      this._size = 0;
    }
  }, {
    key: "resize",
    value: function resize(newSize) {
      if (!(newSize && newSize > 0)) {
        throw new TypeError('`maxSize` must be a number greater than 0');
      }
      var items = _toConsumableArray(this._entriesAscending());
      var removeCount = items.length - newSize;
      if (removeCount < 0) {
        this.cache = new Map(items);
        this.oldCache = new Map();
        this._size = items.length;
      } else {
        if (removeCount > 0) {
          this._emitEvictions(items.slice(0, removeCount));
        }
        this.oldCache = new Map(items.slice(removeCount));
        this.cache = new Map();
        this._size = 0;
      }
      this.maxSize = newSize;
    }
  }, {
    key: "keys",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function keys() {
      var _iterator4, _step4, _step4$value, key;
      return _regeneratorRuntime().wrap(function keys$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _iterator4 = _createForOfIteratorHelper(this);
            _context2.prev = 1;
            _iterator4.s();
          case 3:
            if ((_step4 = _iterator4.n()).done) {
              _context2.next = 9;
              break;
            }
            _step4$value = _slicedToArray(_step4.value, 1), key = _step4$value[0];
            _context2.next = 7;
            return key;
          case 7:
            _context2.next = 3;
            break;
          case 9:
            _context2.next = 14;
            break;
          case 11:
            _context2.prev = 11;
            _context2.t0 = _context2["catch"](1);
            _iterator4.e(_context2.t0);
          case 14:
            _context2.prev = 14;
            _iterator4.f();
            return _context2.finish(14);
          case 17:
          case "end":
            return _context2.stop();
        }
      }, keys, this, [[1, 11, 14, 17]]);
    })
  }, {
    key: "values",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function values() {
      var _iterator5, _step5, _step5$value, value;
      return _regeneratorRuntime().wrap(function values$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            _iterator5 = _createForOfIteratorHelper(this);
            _context3.prev = 1;
            _iterator5.s();
          case 3:
            if ((_step5 = _iterator5.n()).done) {
              _context3.next = 9;
              break;
            }
            _step5$value = _slicedToArray(_step5.value, 2), value = _step5$value[1];
            _context3.next = 7;
            return value;
          case 7:
            _context3.next = 3;
            break;
          case 9:
            _context3.next = 14;
            break;
          case 11:
            _context3.prev = 11;
            _context3.t0 = _context3["catch"](1);
            _iterator5.e(_context3.t0);
          case 14:
            _context3.prev = 14;
            _iterator5.f();
            return _context3.finish(14);
          case 17:
          case "end":
            return _context3.stop();
        }
      }, values, this, [[1, 11, 14, 17]]);
    })
  }, {
    key: Symbol.iterator,
    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {
      var _iterator6, _step6, item, _item5, key, value, deleted, _iterator7, _step7, _item6, _item7, _key2, _value2, _deleted2;
      return _regeneratorRuntime().wrap(function value$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            _iterator6 = _createForOfIteratorHelper(this.cache);
            _context4.prev = 1;
            _iterator6.s();
          case 3:
            if ((_step6 = _iterator6.n()).done) {
              _context4.next = 12;
              break;
            }
            item = _step6.value;
            _item5 = _slicedToArray(item, 2), key = _item5[0], value = _item5[1];
            deleted = this._deleteIfExpired(key, value);
            if (!(deleted === false)) {
              _context4.next = 10;
              break;
            }
            _context4.next = 10;
            return [key, value.value];
          case 10:
            _context4.next = 3;
            break;
          case 12:
            _context4.next = 17;
            break;
          case 14:
            _context4.prev = 14;
            _context4.t0 = _context4["catch"](1);
            _iterator6.e(_context4.t0);
          case 17:
            _context4.prev = 17;
            _iterator6.f();
            return _context4.finish(17);
          case 20:
            _iterator7 = _createForOfIteratorHelper(this.oldCache);
            _context4.prev = 21;
            _iterator7.s();
          case 23:
            if ((_step7 = _iterator7.n()).done) {
              _context4.next = 33;
              break;
            }
            _item6 = _step7.value;
            _item7 = _slicedToArray(_item6, 2), _key2 = _item7[0], _value2 = _item7[1];
            if (this.cache.has(_key2)) {
              _context4.next = 31;
              break;
            }
            _deleted2 = this._deleteIfExpired(_key2, _value2);
            if (!(_deleted2 === false)) {
              _context4.next = 31;
              break;
            }
            _context4.next = 31;
            return [_key2, _value2.value];
          case 31:
            _context4.next = 23;
            break;
          case 33:
            _context4.next = 38;
            break;
          case 35:
            _context4.prev = 35;
            _context4.t1 = _context4["catch"](21);
            _iterator7.e(_context4.t1);
          case 38:
            _context4.prev = 38;
            _iterator7.f();
            return _context4.finish(38);
          case 41:
          case "end":
            return _context4.stop();
        }
      }, value, this, [[1, 14, 17, 20], [21, 35, 38, 41]]);
    })
  }, {
    key: "entriesDescending",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function entriesDescending() {
      var items, i, item, _item8, key, value, deleted, _i, _item9, _item10, _key3, _value3, _deleted3;
      return _regeneratorRuntime().wrap(function entriesDescending$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            items = _toConsumableArray(this.cache);
            i = items.length - 1;
          case 2:
            if (!(i >= 0)) {
              _context5.next = 12;
              break;
            }
            item = items[i];
            _item8 = _slicedToArray(item, 2), key = _item8[0], value = _item8[1];
            deleted = this._deleteIfExpired(key, value);
            if (!(deleted === false)) {
              _context5.next = 9;
              break;
            }
            _context5.next = 9;
            return [key, value.value];
          case 9:
            --i;
            _context5.next = 2;
            break;
          case 12:
            items = _toConsumableArray(this.oldCache);
            _i = items.length - 1;
          case 14:
            if (!(_i >= 0)) {
              _context5.next = 25;
              break;
            }
            _item9 = items[_i];
            _item10 = _slicedToArray(_item9, 2), _key3 = _item10[0], _value3 = _item10[1];
            if (this.cache.has(_key3)) {
              _context5.next = 22;
              break;
            }
            _deleted3 = this._deleteIfExpired(_key3, _value3);
            if (!(_deleted3 === false)) {
              _context5.next = 22;
              break;
            }
            _context5.next = 22;
            return [_key3, _value3.value];
          case 22:
            --_i;
            _context5.next = 14;
            break;
          case 25:
          case "end":
            return _context5.stop();
        }
      }, entriesDescending, this);
    })
  }, {
    key: "entriesAscending",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function entriesAscending() {
      var _iterator8, _step8, _step8$value, key, value;
      return _regeneratorRuntime().wrap(function entriesAscending$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            _iterator8 = _createForOfIteratorHelper(this._entriesAscending());
            _context6.prev = 1;
            _iterator8.s();
          case 3:
            if ((_step8 = _iterator8.n()).done) {
              _context6.next = 9;
              break;
            }
            _step8$value = _slicedToArray(_step8.value, 2), key = _step8$value[0], value = _step8$value[1];
            _context6.next = 7;
            return [key, value.value];
          case 7:
            _context6.next = 3;
            break;
          case 9:
            _context6.next = 14;
            break;
          case 11:
            _context6.prev = 11;
            _context6.t0 = _context6["catch"](1);
            _iterator8.e(_context6.t0);
          case 14:
            _context6.prev = 14;
            _iterator8.f();
            return _context6.finish(14);
          case 17:
          case "end":
            return _context6.stop();
        }
      }, entriesAscending, this, [[1, 11, 14, 17]]);
    })
  }, {
    key: "size",
    get: function get() {
      if (!this._size) {
        return this.oldCache.size;
      }
      var oldCacheSize = 0;
      var _iterator9 = _createForOfIteratorHelper(this.oldCache.keys()),
        _step9;
      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var key = _step9.value;
          if (!this.cache.has(key)) {
            oldCacheSize++;
          }
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
      return Math.min(this._size + oldCacheSize, this.maxSize);
    }
  }]);
}();
module.exports = QuickLRU;