"use strict";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14;
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _taggedTemplateLiteral(e, t) { return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } })); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "buildDynamicImport", {
  enumerable: true,
  get: function get() {
    return _dynamicImport.buildDynamicImport;
  }
});
exports.buildNamespaceInitStatements = buildNamespaceInitStatements;
exports.ensureStatementsHoisted = ensureStatementsHoisted;
Object.defineProperty(exports, "getModuleName", {
  enumerable: true,
  get: function get() {
    return _getModuleName["default"];
  }
});
Object.defineProperty(exports, "hasExports", {
  enumerable: true,
  get: function get() {
    return _normalizeAndLoadMetadata.hasExports;
  }
});
Object.defineProperty(exports, "isModule", {
  enumerable: true,
  get: function get() {
    return _helperModuleImports.isModule;
  }
});
Object.defineProperty(exports, "isSideEffectImport", {
  enumerable: true,
  get: function get() {
    return _normalizeAndLoadMetadata.isSideEffectImport;
  }
});
exports.rewriteModuleStatementsAndPrepareHeader = rewriteModuleStatementsAndPrepareHeader;
Object.defineProperty(exports, "rewriteThis", {
  enumerable: true,
  get: function get() {
    return _rewriteThis["default"];
  }
});
exports.wrapInterop = wrapInterop;
var _assert = require("assert");
var _core = require("@babel/core");
var _helperModuleImports = require("@babel/helper-module-imports");
var _rewriteThis = require("./rewrite-this.js");
var _rewriteLiveReferences = require("./rewrite-live-references.js");
var _normalizeAndLoadMetadata = require("./normalize-and-load-metadata.js");
var Lazy = require("./lazy-modules.js");
var _dynamicImport = require("./dynamic-import.js");
var _getModuleName = require("./get-module-name.js");
var _core$types = _core.types,
  booleanLiteral = _core$types.booleanLiteral,
  callExpression = _core$types.callExpression,
  cloneNode = _core$types.cloneNode,
  directive = _core$types.directive,
  directiveLiteral = _core$types.directiveLiteral,
  expressionStatement = _core$types.expressionStatement,
  identifier = _core$types.identifier,
  isIdentifier = _core$types.isIdentifier,
  memberExpression = _core$types.memberExpression,
  stringLiteral = _core$types.stringLiteral,
  valueToNode = _core$types.valueToNode,
  variableDeclaration = _core$types.variableDeclaration,
  variableDeclarator = _core$types.variableDeclarator;
{
  exports.getDynamicImportSource = require("./dynamic-import").getDynamicImportSource;
}
function rewriteModuleStatementsAndPrepareHeader(path, _ref) {
  var exportName = _ref.exportName,
    strict = _ref.strict,
    allowTopLevelThis = _ref.allowTopLevelThis,
    strictMode = _ref.strictMode,
    noInterop = _ref.noInterop,
    _ref$importInterop = _ref.importInterop,
    importInterop = _ref$importInterop === void 0 ? noInterop ? "none" : "babel" : _ref$importInterop,
    lazy = _ref.lazy,
    _ref$getWrapperPayloa = _ref.getWrapperPayload,
    getWrapperPayload = _ref$getWrapperPayloa === void 0 ? Lazy.toGetWrapperPayload(lazy != null ? lazy : false) : _ref$getWrapperPayloa,
    _ref$wrapReference = _ref.wrapReference,
    wrapReference = _ref$wrapReference === void 0 ? Lazy.wrapReference : _ref$wrapReference,
    esNamespaceOnly = _ref.esNamespaceOnly,
    filename = _ref.filename,
    _ref$constantReexport = _ref.constantReexports,
    constantReexports = _ref$constantReexport === void 0 ? arguments[1].loose : _ref$constantReexport,
    _ref$enumerableModule = _ref.enumerableModuleMeta,
    enumerableModuleMeta = _ref$enumerableModule === void 0 ? arguments[1].loose : _ref$enumerableModule,
    noIncompleteNsImportDetection = _ref.noIncompleteNsImportDetection;
  (0, _normalizeAndLoadMetadata.validateImportInteropOption)(importInterop);
  _assert((0, _helperModuleImports.isModule)(path), "Cannot process module statements in a script");
  path.node.sourceType = "script";
  var meta = (0, _normalizeAndLoadMetadata["default"])(path, exportName, {
    importInterop: importInterop,
    initializeReexports: constantReexports,
    getWrapperPayload: getWrapperPayload,
    esNamespaceOnly: esNamespaceOnly,
    filename: filename
  });
  if (!allowTopLevelThis) {
    (0, _rewriteThis["default"])(path);
  }
  (0, _rewriteLiveReferences["default"])(path, meta, wrapReference);
  if (strictMode !== false) {
    var hasStrict = path.node.directives.some(function (directive) {
      return directive.value.value === "use strict";
    });
    if (!hasStrict) {
      path.unshiftContainer("directives", directive(directiveLiteral("use strict")));
    }
  }
  var headers = [];
  if ((0, _normalizeAndLoadMetadata.hasExports)(meta) && !strict) {
    headers.push(buildESModuleHeader(meta, enumerableModuleMeta));
  }
  var nameList = buildExportNameListDeclaration(path, meta);
  if (nameList) {
    meta.exportNameListName = nameList.name;
    headers.push(nameList.statement);
  }
  headers.push.apply(headers, _toConsumableArray(buildExportInitializationStatements(path, meta, wrapReference, constantReexports, noIncompleteNsImportDetection)));
  return {
    meta: meta,
    headers: headers
  };
}
function ensureStatementsHoisted(statements) {
  statements.forEach(function (header) {
    header._blockHoist = 3;
  });
}
function wrapInterop(programPath, expr, type) {
  if (type === "none") {
    return null;
  }
  if (type === "node-namespace") {
    return callExpression(programPath.hub.addHelper("interopRequireWildcard"), [expr, booleanLiteral(true)]);
  } else if (type === "node-default") {
    return null;
  }
  var helper;
  if (type === "default") {
    helper = "interopRequireDefault";
  } else if (type === "namespace") {
    helper = "interopRequireWildcard";
  } else {
    throw new Error("Unknown interop: ".concat(type));
  }
  return callExpression(programPath.hub.addHelper(helper), [expr]);
}
function buildNamespaceInitStatements(metadata, sourceMetadata) {
  var constantReexports = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var wrapReference = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Lazy.wrapReference;
  var _wrapReference;
  var statements = [];
  var srcNamespaceId = identifier(sourceMetadata.name);
  var _iterator = _createForOfIteratorHelper(sourceMetadata.importsNamespace),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var localName = _step.value;
      if (localName === sourceMetadata.name) continue;
      statements.push(_core.template.statement(_templateObject || (_templateObject = _taggedTemplateLiteral(["var NAME = SOURCE;"])))({
        NAME: localName,
        SOURCE: cloneNode(srcNamespaceId)
      }));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var srcNamespace = (_wrapReference = wrapReference(srcNamespaceId, sourceMetadata.wrap)) != null ? _wrapReference : srcNamespaceId;
  if (constantReexports) {
    statements.push.apply(statements, _toConsumableArray(buildReexportsFromMeta(metadata, sourceMetadata, true, wrapReference)));
  }
  var _iterator2 = _createForOfIteratorHelper(sourceMetadata.reexportNamespace),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var exportName = _step2.value;
      statements.push((!_core.types.isIdentifier(srcNamespace) ? _core.template.statement(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n            Object.defineProperty(EXPORTS, \"NAME\", {\n              enumerable: true,\n              get: function() {\n                return NAMESPACE;\n              }\n            });\n          "]))) : _core.template.statement(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["EXPORTS.NAME = NAMESPACE;"]))))({
        EXPORTS: metadata.exportName,
        NAME: exportName,
        NAMESPACE: cloneNode(srcNamespace)
      }));
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  if (sourceMetadata.reexportAll) {
    var statement = buildNamespaceReexport(metadata, cloneNode(srcNamespace), constantReexports);
    statement.loc = sourceMetadata.reexportAll.loc;
    statements.push(statement);
  }
  return statements;
}
var ReexportTemplate = {
  constant: _core.template.statement(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["EXPORTS.EXPORT_NAME = NAMESPACE_IMPORT;"]))),
  constantComputed: _core.template.statement(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["EXPORTS[\"EXPORT_NAME\"] = NAMESPACE_IMPORT;"]))),
  spec: _core.template.statement(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n    Object.defineProperty(EXPORTS, \"EXPORT_NAME\", {\n      enumerable: true,\n      get: function() {\n        return NAMESPACE_IMPORT;\n      },\n    });\n    "])))
};
function buildReexportsFromMeta(meta, metadata, constantReexports, wrapReference) {
  var _wrapReference2;
  var namespace = identifier(metadata.name);
  namespace = (_wrapReference2 = wrapReference(namespace, metadata.wrap)) != null ? _wrapReference2 : namespace;
  var stringSpecifiers = meta.stringSpecifiers;
  return Array.from(metadata.reexports, function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
      exportName = _ref3[0],
      importName = _ref3[1];
    var NAMESPACE_IMPORT = cloneNode(namespace);
    if (importName === "default" && metadata.interop === "node-default") {} else if (stringSpecifiers.has(importName)) {
      NAMESPACE_IMPORT = memberExpression(NAMESPACE_IMPORT, stringLiteral(importName), true);
    } else {
      NAMESPACE_IMPORT = memberExpression(NAMESPACE_IMPORT, identifier(importName));
    }
    var astNodes = {
      EXPORTS: meta.exportName,
      EXPORT_NAME: exportName,
      NAMESPACE_IMPORT: NAMESPACE_IMPORT
    };
    if (constantReexports || isIdentifier(NAMESPACE_IMPORT)) {
      if (stringSpecifiers.has(exportName)) {
        return ReexportTemplate.constantComputed(astNodes);
      } else {
        return ReexportTemplate.constant(astNodes);
      }
    } else {
      return ReexportTemplate.spec(astNodes);
    }
  });
}
function buildESModuleHeader(metadata) {
  var enumerableModuleMeta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return (enumerableModuleMeta ? _core.template.statement(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n        EXPORTS.__esModule = true;\n      "]))) : _core.template.statement(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n        Object.defineProperty(EXPORTS, \"__esModule\", {\n          value: true,\n        });\n      "]))))({
    EXPORTS: metadata.exportName
  });
}
function buildNamespaceReexport(metadata, namespace, constantReexports) {
  return (constantReexports ? _core.template.statement(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n        Object.keys(NAMESPACE).forEach(function(key) {\n          if (key === \"default\" || key === \"__esModule\") return;\n          VERIFY_NAME_LIST;\n          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;\n\n          EXPORTS[key] = NAMESPACE[key];\n        });\n      "]))) : _core.template.statement(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n        Object.keys(NAMESPACE).forEach(function(key) {\n          if (key === \"default\" || key === \"__esModule\") return;\n          VERIFY_NAME_LIST;\n          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;\n\n          Object.defineProperty(EXPORTS, key, {\n            enumerable: true,\n            get: function() {\n              return NAMESPACE[key];\n            },\n          });\n        });\n    "]))))({
    NAMESPACE: namespace,
    EXPORTS: metadata.exportName,
    VERIFY_NAME_LIST: metadata.exportNameListName ? (0, _core.template)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;\n          "])))({
      EXPORTS_LIST: metadata.exportNameListName
    }) : null
  });
}
function buildExportNameListDeclaration(programPath, metadata) {
  var exportedVars = Object.create(null);
  var _iterator3 = _createForOfIteratorHelper(metadata.local.values()),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var data = _step3.value;
      var _iterator5 = _createForOfIteratorHelper(data.names),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _name = _step5.value;
          exportedVars[_name] = true;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  var hasReexport = false;
  var _iterator4 = _createForOfIteratorHelper(metadata.source.values()),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var _data = _step4.value;
      var _iterator6 = _createForOfIteratorHelper(_data.reexports.keys()),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var exportName = _step6.value;
          exportedVars[exportName] = true;
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      var _iterator7 = _createForOfIteratorHelper(_data.reexportNamespace),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _exportName = _step7.value;
          exportedVars[_exportName] = true;
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      hasReexport = hasReexport || !!_data.reexportAll;
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
  if (!hasReexport || Object.keys(exportedVars).length === 0) return null;
  var name = programPath.scope.generateUidIdentifier("exportNames");
  delete exportedVars["default"];
  return {
    name: name.name,
    statement: variableDeclaration("var", [variableDeclarator(name, valueToNode(exportedVars))])
  };
}
function buildExportInitializationStatements(programPath, metadata, wrapReference) {
  var constantReexports = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var noIncompleteNsImportDetection = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var initStatements = [];
  var _iterator8 = _createForOfIteratorHelper(metadata.local),
    _step8;
  try {
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var _step8$value = _slicedToArray(_step8.value, 2),
        localName = _step8$value[0],
        data = _step8$value[1];
      if (data.kind === "import") {} else if (data.kind === "hoisted") {
        initStatements.push([data.names[0], buildInitStatement(metadata, data.names, identifier(localName))]);
      } else if (!noIncompleteNsImportDetection) {
        var _iterator11 = _createForOfIteratorHelper(data.names),
          _step11;
        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var _exportName2 = _step11.value;
            initStatements.push([_exportName2, null]);
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }
      }
    }
  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }
  var _iterator9 = _createForOfIteratorHelper(metadata.source.values()),
    _step9;
  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var _data2 = _step9.value;
      if (!constantReexports) {
        var reexportsStatements = buildReexportsFromMeta(metadata, _data2, false, wrapReference);
        var reexports = _toConsumableArray(_data2.reexports.keys());
        for (var _i = 0; _i < reexportsStatements.length; _i++) {
          initStatements.push([reexports[_i], reexportsStatements[_i]]);
        }
      }
      if (!noIncompleteNsImportDetection) {
        var _iterator12 = _createForOfIteratorHelper(_data2.reexportNamespace),
          _step12;
        try {
          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
            var _exportName3 = _step12.value;
            initStatements.push([_exportName3, null]);
          }
        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }
      }
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }
  initStatements.sort(function (_ref4, _ref5) {
    var _ref6 = _slicedToArray(_ref4, 1),
      a = _ref6[0];
    var _ref7 = _slicedToArray(_ref5, 1),
      b = _ref7[0];
    if (a < b) return -1;
    if (b < a) return 1;
    return 0;
  });
  var results = [];
  if (noIncompleteNsImportDetection) {
    var _iterator10 = _createForOfIteratorHelper(initStatements),
      _step10;
    try {
      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
        var _step10$value = _slicedToArray(_step10.value, 2),
          initStatement = _step10$value[1];
        results.push(initStatement);
      }
    } catch (err) {
      _iterator10.e(err);
    } finally {
      _iterator10.f();
    }
  } else {
    var chunkSize = 100;
    for (var i = 0; i < initStatements.length; i += chunkSize) {
      var uninitializedExportNames = [];
      for (var j = 0; j < chunkSize && i + j < initStatements.length; j++) {
        var _initStatements = _slicedToArray(initStatements[i + j], 2),
          exportName = _initStatements[0],
          _initStatement = _initStatements[1];
        if (_initStatement !== null) {
          if (uninitializedExportNames.length > 0) {
            results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));
            uninitializedExportNames = [];
          }
          results.push(_initStatement);
        } else {
          uninitializedExportNames.push(exportName);
        }
      }
      if (uninitializedExportNames.length > 0) {
        results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));
      }
    }
  }
  return results;
}
var InitTemplate = {
  computed: _core.template.expression(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["EXPORTS[\"NAME\"] = VALUE"]))),
  "default": _core.template.expression(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["EXPORTS.NAME = VALUE"]))),
  define: _core.template.expression(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["Object.defineProperty(EXPORTS, \"NAME\", { enumerable:true, value: void 0, writable: true })[\"NAME\"] = VALUE"])))
};
function buildInitStatement(metadata, exportNames, initExpr) {
  var stringSpecifiers = metadata.stringSpecifiers,
    EXPORTS = metadata.exportName;
  return expressionStatement(exportNames.reduce(function (acc, exportName) {
    var params = {
      EXPORTS: EXPORTS,
      NAME: exportName,
      VALUE: acc
    };
    if (exportName === "__proto__") {
      return InitTemplate.define(params);
    }
    if (stringSpecifiers.has(exportName)) {
      return InitTemplate.computed(params);
    }
    return InitTemplate["default"](params);
  }, initExpr));
}