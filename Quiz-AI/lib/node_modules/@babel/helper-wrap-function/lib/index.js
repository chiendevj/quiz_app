"use strict";

function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = wrapFunction;
var _helperFunctionName = require("@babel/helper-function-name");
var _template = require("@babel/template");
var _t = require("@babel/types");
var blockStatement = _t.blockStatement,
  callExpression = _t.callExpression,
  functionExpression = _t.functionExpression,
  isAssignmentPattern = _t.isAssignmentPattern,
  isFunctionDeclaration = _t.isFunctionDeclaration,
  isRestElement = _t.isRestElement,
  returnStatement = _t.returnStatement,
  isCallExpression = _t.isCallExpression;
var buildAnonymousExpressionWrapper = _template["default"].expression("\n  (function () {\n    var REF = FUNCTION;\n    return function NAME(PARAMS) {\n      return REF.apply(this, arguments);\n    };\n  })()\n");
var buildNamedExpressionWrapper = _template["default"].expression("\n  (function () {\n    var REF = FUNCTION;\n    function NAME(PARAMS) {\n      return REF.apply(this, arguments);\n    }\n    return NAME;\n  })()\n");
var buildDeclarationWrapper = _template["default"].statements("\n  function NAME(PARAMS) { return REF.apply(this, arguments); }\n  function REF() {\n    REF = FUNCTION;\n    return REF.apply(this, arguments);\n  }\n");
function classOrObjectMethod(path, callId) {
  var node = path.node;
  var body = node.body;
  var container = functionExpression(null, [], blockStatement(body.body), true);
  body.body = [returnStatement(callExpression(callExpression(callId, [container]), []))];
  node.async = false;
  node.generator = false;
  path.get("body.body.0.argument.callee.arguments.0").unwrapFunctionEnvironment();
}
function plainFunction(inPath, callId, noNewArrows, ignoreFunctionLength) {
  var path = inPath;
  var node;
  var functionId = null;
  var nodeParams = inPath.node.params;
  if (path.isArrowFunctionExpression()) {
    {
      var _path$arrowFunctionTo;
      path = (_path$arrowFunctionTo = path.arrowFunctionToExpression({
        noNewArrows: noNewArrows
      })) != null ? _path$arrowFunctionTo : path;
    }
    node = path.node;
  } else {
    node = path.node;
  }
  var isDeclaration = isFunctionDeclaration(node);
  var built = node;
  if (!isCallExpression(node)) {
    functionId = node.id;
    node.id = null;
    node.type = "FunctionExpression";
    built = callExpression(callId, [node]);
  }
  var params = [];
  var _iterator = _createForOfIteratorHelper(nodeParams),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var param = _step.value;
      if (isAssignmentPattern(param) || isRestElement(param)) {
        break;
      }
      params.push(path.scope.generateUidIdentifier("x"));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var wrapperArgs = {
    NAME: functionId || null,
    REF: path.scope.generateUidIdentifier(functionId ? functionId.name : "ref"),
    FUNCTION: built,
    PARAMS: params
  };
  if (isDeclaration) {
    var container = buildDeclarationWrapper(wrapperArgs);
    path.replaceWith(container[0]);
    path.insertAfter(container[1]);
  } else {
    var _container;
    if (functionId) {
      _container = buildNamedExpressionWrapper(wrapperArgs);
    } else {
      _container = buildAnonymousExpressionWrapper(wrapperArgs);
      var returnFn = _container.callee.body.body[1].argument;
      (0, _helperFunctionName["default"])({
        node: returnFn,
        parent: path.parent,
        scope: path.scope
      });
      functionId = returnFn.id;
    }
    if (functionId || !ignoreFunctionLength && params.length) {
      path.replaceWith(_container);
    } else {
      path.replaceWith(built);
    }
  }
}
function wrapFunction(path, callId) {
  var noNewArrows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var ignoreFunctionLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  if (path.isMethod()) {
    classOrObjectMethod(path, callId);
  } else {
    plainFunction(path, callId, noNewArrows, ignoreFunctionLength);
  }
}