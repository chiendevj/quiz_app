"use strict";

function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _helperPluginUtils = require("@babel/helper-plugin-utils");
var _helperEnvironmentVisitor = require("@babel/helper-environment-visitor");
var _default = exports["default"] = (0, _helperPluginUtils.declare)(function (_ref) {
  var t = _ref.types,
    traverse = _ref.traverse,
    assertVersion = _ref.assertVersion;
  assertVersion(7);
  var containsClassExpressionVisitor = {
    ClassExpression: function ClassExpression(path, state) {
      state.found = true;
      path.stop();
    },
    Function: function Function(path) {
      path.skip();
    }
  };
  var containsYieldOrAwaitVisitor = traverse.visitors.merge([{
    YieldExpression: function YieldExpression(path, state) {
      state["yield"] = true;
      if (state["await"]) path.stop();
    },
    AwaitExpression: function AwaitExpression(path, state) {
      state["await"] = true;
      if (state["yield"]) path.stop();
    }
  }, _helperEnvironmentVisitor["default"]]);
  function containsClassExpression(path) {
    if (t.isClassExpression(path.node)) return true;
    if (t.isFunction(path.node)) return false;
    var state = {
      found: false
    };
    path.traverse(containsClassExpressionVisitor, state);
    return state.found;
  }
  function wrap(path) {
    var context = {
      "yield": t.isYieldExpression(path.node),
      "await": t.isAwaitExpression(path.node)
    };
    path.traverse(containsYieldOrAwaitVisitor, context);
    var replacement;
    if (context["yield"]) {
      var fn = t.functionExpression(null, [], t.blockStatement([t.returnStatement(path.node)]), true, context["await"]);
      replacement = t.yieldExpression(t.callExpression(t.memberExpression(fn, t.identifier("call")), [t.thisExpression(), t.identifier("arguments")]), true);
    } else {
      var _fn = t.arrowFunctionExpression([], path.node, context["await"]);
      replacement = t.callExpression(_fn, []);
      if (context["await"]) replacement = t.awaitExpression(replacement);
    }
    path.replaceWith(replacement);
  }
  return {
    name: "bugfix-firefox-class-in-computed-class-key",
    visitor: {
      Class: function Class(path) {
        var hasPrivateElement = path.node.body.body.some(function (node) {
          return t.isPrivate(node);
        });
        if (!hasPrivateElement) return;
        var _iterator = _createForOfIteratorHelper(path.get("body.body")),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var elem = _step.value;
            if ("computed" in elem.node && elem.node.computed && containsClassExpression(elem.get("key"))) {
              wrap(elem.get("key"));
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }
  };
});