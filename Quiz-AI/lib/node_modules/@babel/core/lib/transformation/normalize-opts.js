"use strict";

function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = normalizeOptions;
function _path() {
  var data = require("path");
  _path = function _path() {
    return data;
  };
  return data;
}
function normalizeOptions(config) {
  var _config$options = config.options,
    filename = _config$options.filename,
    cwd = _config$options.cwd,
    _config$options$filen = _config$options.filenameRelative,
    filenameRelative = _config$options$filen === void 0 ? typeof filename === "string" ? _path().relative(cwd, filename) : "unknown" : _config$options$filen,
    _config$options$sourc = _config$options.sourceType,
    sourceType = _config$options$sourc === void 0 ? "module" : _config$options$sourc,
    inputSourceMap = _config$options.inputSourceMap,
    _config$options$sourc2 = _config$options.sourceMaps,
    sourceMaps = _config$options$sourc2 === void 0 ? !!inputSourceMap : _config$options$sourc2,
    _config$options$sourc3 = _config$options.sourceRoot,
    sourceRoot = _config$options$sourc3 === void 0 ? config.options.moduleRoot : _config$options$sourc3,
    _config$options$sourc4 = _config$options.sourceFileName,
    sourceFileName = _config$options$sourc4 === void 0 ? _path().basename(filenameRelative) : _config$options$sourc4,
    _config$options$comme = _config$options.comments,
    comments = _config$options$comme === void 0 ? true : _config$options$comme,
    _config$options$compa = _config$options.compact,
    compact = _config$options$compa === void 0 ? "auto" : _config$options$compa;
  var opts = config.options;
  var options = Object.assign({}, opts, {
    parserOpts: Object.assign({
      sourceType: _path().extname(filenameRelative) === ".mjs" ? "module" : sourceType,
      sourceFileName: filename,
      plugins: []
    }, opts.parserOpts),
    generatorOpts: Object.assign({
      filename: filename,
      auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
      auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
      retainLines: opts.retainLines,
      comments: comments,
      shouldPrintComment: opts.shouldPrintComment,
      compact: compact,
      minified: opts.minified,
      sourceMaps: sourceMaps,
      sourceRoot: sourceRoot,
      sourceFileName: sourceFileName
    }, opts.generatorOpts)
  });
  var _iterator = _createForOfIteratorHelper(config.passes),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var plugins = _step.value;
      var _iterator2 = _createForOfIteratorHelper(plugins),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var plugin = _step2.value;
          if (plugin.manipulateOptions) {
            plugin.manipulateOptions(options, options.parserOpts);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return options;
}
0 && 0;