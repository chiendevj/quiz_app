"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function helpers() {
  var data = require("@babel/helpers");
  helpers = function helpers() {
    return data;
  };
  return data;
}
function _traverse() {
  var data = require("@babel/traverse");
  _traverse = function _traverse() {
    return data;
  };
  return data;
}
function _codeFrame() {
  var data = require("@babel/code-frame");
  _codeFrame = function _codeFrame() {
    return data;
  };
  return data;
}
function _t() {
  var data = require("@babel/types");
  _t = function _t() {
    return data;
  };
  return data;
}
function _helperModuleTransforms() {
  var data = require("@babel/helper-module-transforms");
  _helperModuleTransforms = function _helperModuleTransforms() {
    return data;
  };
  return data;
}
function _semver() {
  var data = require("semver");
  _semver = function _semver() {
    return data;
  };
  return data;
}
var _t2 = _t(),
  cloneNode = _t2.cloneNode,
  interpreterDirective = _t2.interpreterDirective;
var errorVisitor = {
  enter: function enter(path, state) {
    var loc = path.node.loc;
    if (loc) {
      state.loc = loc;
      path.stop();
    }
  }
};
var File = /*#__PURE__*/function () {
  function File(options, _ref) {
    var _this = this;
    var code = _ref.code,
      ast = _ref.ast,
      inputMap = _ref.inputMap;
    _classCallCheck(this, File);
    this._map = new Map();
    this.opts = void 0;
    this.declarations = {};
    this.path = void 0;
    this.ast = void 0;
    this.scope = void 0;
    this.metadata = {};
    this.code = "";
    this.inputMap = void 0;
    this.hub = {
      file: this,
      getCode: function getCode() {
        return _this.code;
      },
      getScope: function getScope() {
        return _this.scope;
      },
      addHelper: this.addHelper.bind(this),
      buildError: this.buildCodeFrameError.bind(this)
    };
    this.opts = options;
    this.code = code;
    this.ast = ast;
    this.inputMap = inputMap;
    this.path = _traverse().NodePath.get({
      hub: this.hub,
      parentPath: null,
      parent: this.ast,
      container: this.ast,
      key: "program"
    }).setContext();
    this.scope = this.path.scope;
  }
  return _createClass(File, [{
    key: "shebang",
    get: function get() {
      var interpreter = this.path.node.interpreter;
      return interpreter ? interpreter.value : "";
    },
    set: function set(value) {
      if (value) {
        this.path.get("interpreter").replaceWith(interpreterDirective(value));
      } else {
        this.path.get("interpreter").remove();
      }
    }
  }, {
    key: "set",
    value: function set(key, val) {
      {
        if (key === "helpersNamespace") {
          throw new Error("Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility." + "If you are using @babel/plugin-external-helpers you will need to use a newer " + "version than the one you currently have installed. " + "If you have your own implementation, you'll want to explore using 'helperGenerator' " + "alongside 'file.availableHelper()'.");
        }
      }
      this._map.set(key, val);
    }
  }, {
    key: "get",
    value: function get(key) {
      return this._map.get(key);
    }
  }, {
    key: "has",
    value: function has(key) {
      return this._map.has(key);
    }
  }, {
    key: "getModuleName",
    value: function getModuleName() {
      return (0, _helperModuleTransforms().getModuleName)(this.opts, this.opts);
    }
  }, {
    key: "availableHelper",
    value: function availableHelper(name, versionRange) {
      var minVersion;
      try {
        minVersion = helpers().minVersion(name);
      } catch (err) {
        if (err.code !== "BABEL_HELPER_UNKNOWN") throw err;
        return false;
      }
      if (typeof versionRange !== "string") return true;
      if (_semver().valid(versionRange)) versionRange = "^".concat(versionRange);
      {
        return !_semver().intersects("<".concat(minVersion), versionRange) && !_semver().intersects(">=8.0.0", versionRange);
      }
    }
  }, {
    key: "addHelper",
    value: function addHelper(name) {
      var _this2 = this;
      var declar = this.declarations[name];
      if (declar) return cloneNode(declar);
      var generator = this.get("helperGenerator");
      if (generator) {
        var res = generator(name);
        if (res) return res;
      }
      helpers().minVersion(name);
      var uid = this.declarations[name] = this.scope.generateUidIdentifier(name);
      var dependencies = {};
      var _iterator = _createForOfIteratorHelper(helpers().getDependencies(name)),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var dep = _step.value;
          dependencies[dep] = this.addHelper(dep);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      var _helpers$get = helpers().get(name, function (dep) {
          return dependencies[dep];
        }, uid.name, Object.keys(this.scope.getAllBindings())),
        nodes = _helpers$get.nodes,
        globals = _helpers$get.globals;
      globals.forEach(function (name) {
        if (_this2.path.scope.hasBinding(name, true)) {
          _this2.path.scope.rename(name);
        }
      });
      nodes.forEach(function (node) {
        node._compact = true;
      });
      var added = this.path.unshiftContainer("body", nodes);
      var _iterator2 = _createForOfIteratorHelper(added),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var path = _step2.value;
          if (path.isVariableDeclaration()) this.scope.registerDeclaration(path);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return uid;
    }
  }, {
    key: "buildCodeFrameError",
    value: function buildCodeFrameError(node, msg) {
      var _Error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : SyntaxError;
      var loc = node == null ? void 0 : node.loc;
      if (!loc && node) {
        var state = {
          loc: null
        };
        (0, _traverse()["default"])(node, errorVisitor, this.scope, state);
        loc = state.loc;
        var txt = "This is an error on an internal node. Probably an internal error.";
        if (loc) txt += " Location has been estimated.";
        msg += " (".concat(txt, ")");
      }
      if (loc) {
        var _this$opts$highlightC = this.opts.highlightCode,
          highlightCode = _this$opts$highlightC === void 0 ? true : _this$opts$highlightC;
        msg += "\n" + (0, _codeFrame().codeFrameColumns)(this.code, {
          start: {
            line: loc.start.line,
            column: loc.start.column + 1
          },
          end: loc.end && loc.start.line === loc.end.line ? {
            line: loc.end.line,
            column: loc.end.column + 1
          } : undefined
        }, {
          highlightCode: highlightCode
        });
      }
      return new _Error(msg);
    }
  }]);
}();
exports["default"] = File;
{
  File.prototype.addImport = function addImport() {
    throw new Error("This API has been removed. If you're looking for this " + "functionality in Babel 7, you should import the " + "'@babel/helper-module-imports' module and use the functions exposed " + " from that module, such as 'addNamed' or 'addDefault'.");
  };
  File.prototype.addTemplateObject = function addTemplateObject() {
    throw new Error("This function has been moved into the template literal transform itself.");
  };
}
0 && 0;