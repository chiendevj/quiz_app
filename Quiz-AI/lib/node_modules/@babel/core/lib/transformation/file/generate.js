"use strict";

function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = generateCode;
function _convertSourceMap() {
  var data = require("convert-source-map");
  _convertSourceMap = function _convertSourceMap() {
    return data;
  };
  return data;
}
function _generator() {
  var data = require("@babel/generator");
  _generator = function _generator() {
    return data;
  };
  return data;
}
var _mergeMap = require("./merge-map.js");
function generateCode(pluginPasses, file) {
  var opts = file.opts,
    ast = file.ast,
    code = file.code,
    inputMap = file.inputMap;
  var generatorOpts = opts.generatorOpts;
  generatorOpts.inputSourceMap = inputMap == null ? void 0 : inputMap.toObject();
  var results = [];
  var _iterator = _createForOfIteratorHelper(pluginPasses),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var plugins = _step.value;
      var _iterator2 = _createForOfIteratorHelper(plugins),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var plugin = _step2.value;
          var generatorOverride = plugin.generatorOverride;
          if (generatorOverride) {
            var _result2 = generatorOverride(ast, generatorOpts, code, _generator()["default"]);
            if (_result2 !== undefined) results.push(_result2);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var result;
  if (results.length === 0) {
    result = (0, _generator()["default"])(ast, generatorOpts, code);
  } else if (results.length === 1) {
    result = results[0];
    if (typeof result.then === "function") {
      throw new Error("You appear to be using an async codegen plugin, " + "which your current version of Babel does not support. " + "If you're using a published plugin, " + "you may need to upgrade your @babel/core version.");
    }
  } else {
    throw new Error("More than one plugin attempted to override codegen.");
  }
  var _result = result,
    outputCode = _result.code,
    _result$decodedMap = _result.decodedMap,
    outputMap = _result$decodedMap === void 0 ? result.map : _result$decodedMap;
  if (result.__mergedMap) {
    outputMap = Object.assign({}, result.map);
  } else {
    if (outputMap) {
      if (inputMap) {
        outputMap = (0, _mergeMap["default"])(inputMap.toObject(), outputMap, generatorOpts.sourceFileName);
      } else {
        outputMap = result.map;
      }
    }
  }
  if (opts.sourceMaps === "inline" || opts.sourceMaps === "both") {
    outputCode += "\n" + _convertSourceMap().fromObject(outputMap).toComment();
  }
  if (opts.sourceMaps === "inline") {
    outputMap = null;
  }
  return {
    outputCode: outputCode,
    outputMap: outputMap
  };
}
0 && 0;