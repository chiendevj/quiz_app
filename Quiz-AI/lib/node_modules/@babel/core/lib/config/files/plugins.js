"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
var _marked = /*#__PURE__*/_regeneratorRuntime().mark(loadPlugin),
  _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(loadPreset),
  _marked3 = /*#__PURE__*/_regeneratorRuntime().mark(resolveAlternativesHelper),
  _marked4 = /*#__PURE__*/_regeneratorRuntime().mark(requireModule);
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadPlugin = loadPlugin;
exports.loadPreset = loadPreset;
exports.resolvePreset = exports.resolvePlugin = void 0;
function _debug() {
  var data = require("debug");
  _debug = function _debug() {
    return data;
  };
  return data;
}
function _path() {
  var data = require("path");
  _path = function _path() {
    return data;
  };
  return data;
}
var _async = require("../../gensync-utils/async.js");
var _moduleTypes = require("./module-types.js");
function _url() {
  var data = require("url");
  _url = function _url() {
    return data;
  };
  return data;
}
var _importMetaResolve = require("../../vendor/import-meta-resolve.js");
function _fs() {
  var data = require("fs");
  _fs = function _fs() {
    return data;
  };
  return data;
}
var debug = _debug()("babel:config:loading:files:plugins");
var EXACT_RE = /^module:/;
var BABEL_PLUGIN_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-plugin-)/;
var BABEL_PRESET_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-preset-)/;
var BABEL_PLUGIN_ORG_RE = /^(@babel\/)(?!plugin-|[^/]+\/)/;
var BABEL_PRESET_ORG_RE = /^(@babel\/)(?!preset-|[^/]+\/)/;
var OTHER_PLUGIN_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-plugin(?:-|\/|$)|[^/]+\/)/;
var OTHER_PRESET_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-preset(?:-|\/|$)|[^/]+\/)/;
var OTHER_ORG_DEFAULT_RE = /^(@(?!babel$)[^/]+)$/;
var resolvePlugin = exports.resolvePlugin = resolveStandardizedName.bind(null, "plugin");
var resolvePreset = exports.resolvePreset = resolveStandardizedName.bind(null, "preset");
function loadPlugin(name, dirname) {
  var filepath, value;
  return _regeneratorRuntime().wrap(function loadPlugin$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        _context.t0 = resolvePlugin;
        _context.t1 = name;
        _context.t2 = dirname;
        return _context.delegateYield((0, _async.isAsync)(), "t3", 4);
      case 4:
        _context.t4 = _context.t3;
        filepath = (0, _context.t0)(_context.t1, _context.t2, _context.t4);
        return _context.delegateYield(requireModule("plugin", filepath), "t5", 7);
      case 7:
        value = _context.t5;
        debug("Loaded plugin %o from %o.", name, dirname);
        return _context.abrupt("return", {
          filepath: filepath,
          value: value
        });
      case 10:
      case "end":
        return _context.stop();
    }
  }, _marked);
}
function loadPreset(name, dirname) {
  var filepath, value;
  return _regeneratorRuntime().wrap(function loadPreset$(_context2) {
    while (1) switch (_context2.prev = _context2.next) {
      case 0:
        _context2.t0 = resolvePreset;
        _context2.t1 = name;
        _context2.t2 = dirname;
        return _context2.delegateYield((0, _async.isAsync)(), "t3", 4);
      case 4:
        _context2.t4 = _context2.t3;
        filepath = (0, _context2.t0)(_context2.t1, _context2.t2, _context2.t4);
        return _context2.delegateYield(requireModule("preset", filepath), "t5", 7);
      case 7:
        value = _context2.t5;
        debug("Loaded preset %o from %o.", name, dirname);
        return _context2.abrupt("return", {
          filepath: filepath,
          value: value
        });
      case 10:
      case "end":
        return _context2.stop();
    }
  }, _marked2);
}
function standardizeName(type, name) {
  if (_path().isAbsolute(name)) return name;
  var isPreset = type === "preset";
  return name.replace(isPreset ? BABEL_PRESET_PREFIX_RE : BABEL_PLUGIN_PREFIX_RE, "babel-".concat(type, "-")).replace(isPreset ? BABEL_PRESET_ORG_RE : BABEL_PLUGIN_ORG_RE, "$1".concat(type, "-")).replace(isPreset ? OTHER_PRESET_ORG_RE : OTHER_PLUGIN_ORG_RE, "$1babel-".concat(type, "-")).replace(OTHER_ORG_DEFAULT_RE, "$1/babel-".concat(type)).replace(EXACT_RE, "");
}
function resolveAlternativesHelper(type, name) {
  var standardizedName, _yield$standardizedNa, error, value, oppositeType, transformName;
  return _regeneratorRuntime().wrap(function resolveAlternativesHelper$(_context3) {
    while (1) switch (_context3.prev = _context3.next) {
      case 0:
        standardizedName = standardizeName(type, name);
        _context3.next = 3;
        return standardizedName;
      case 3:
        _yield$standardizedNa = _context3.sent;
        error = _yield$standardizedNa.error;
        value = _yield$standardizedNa.value;
        if (error) {
          _context3.next = 8;
          break;
        }
        return _context3.abrupt("return", value);
      case 8:
        if (!(error.code !== "MODULE_NOT_FOUND")) {
          _context3.next = 10;
          break;
        }
        throw error;
      case 10:
        _context3.t0 = standardizedName !== name;
        if (!_context3.t0) {
          _context3.next = 15;
          break;
        }
        _context3.next = 14;
        return name;
      case 14:
        _context3.t0 = !_context3.sent.error;
      case 15:
        if (!_context3.t0) {
          _context3.next = 17;
          break;
        }
        error.message += "\n- If you want to resolve \"".concat(name, "\", use \"module:").concat(name, "\"");
      case 17:
        _context3.next = 19;
        return standardizeName(type, "@babel/" + name);
      case 19:
        if (_context3.sent.error) {
          _context3.next = 21;
          break;
        }
        error.message += "\n- Did you mean \"@babel/".concat(name, "\"?");
      case 21:
        oppositeType = type === "preset" ? "plugin" : "preset";
        _context3.next = 24;
        return standardizeName(oppositeType, name);
      case 24:
        if (_context3.sent.error) {
          _context3.next = 26;
          break;
        }
        error.message += "\n- Did you accidentally pass a ".concat(oppositeType, " as a ").concat(type, "?");
      case 26:
        if (!(type === "plugin")) {
          _context3.next = 35;
          break;
        }
        transformName = standardizedName.replace("-proposal-", "-transform-");
        _context3.t1 = transformName !== standardizedName;
        if (!_context3.t1) {
          _context3.next = 33;
          break;
        }
        _context3.next = 32;
        return transformName;
      case 32:
        _context3.t1 = !_context3.sent.error;
      case 33:
        if (!_context3.t1) {
          _context3.next = 35;
          break;
        }
        error.message += "\n- Did you mean \"".concat(transformName, "\"?");
      case 35:
        error.message += "\n\nMake sure that all the Babel plugins and presets you are using\nare defined as dependencies or devDependencies in your package.json\nfile. It's possible that the missing plugin is loaded by a preset\nyou are using that forgot to add the plugin to its dependencies: you\ncan workaround this problem by explicitly adding the missing package\nto your top-level package.json.\n";
        throw error;
      case 37:
      case "end":
        return _context3.stop();
    }
  }, _marked3);
}
function tryRequireResolve(id, dirname) {
  try {
    if (dirname) {
      return {
        error: null,
        value: (function (v, w) {
          return v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1];
        }(process.versions.node, "8.9") ? require.resolve : function (r, _ref) {
          var _ref$paths = _slicedToArray(_ref.paths, 1),
            b = _ref$paths[0];
          var M = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : require("module");
          var f = M._findPath(r, M._nodeModulePaths(b).concat(b));
          if (f) return f;
          f = new Error("Cannot resolve module '".concat(r, "'"));
          f.code = "MODULE_NOT_FOUND";
          throw f;
        })(id, {
          paths: [dirname]
        })
      };
    } else {
      return {
        error: null,
        value: require.resolve(id)
      };
    }
  } catch (error) {
    return {
      error: error,
      value: null
    };
  }
}
function tryImportMetaResolve(id, options) {
  try {
    return {
      error: null,
      value: (0, _importMetaResolve.resolve)(id, options)
    };
  } catch (error) {
    return {
      error: error,
      value: null
    };
  }
}
function resolveStandardizedNameForRequire(type, name, dirname) {
  var it = resolveAlternativesHelper(type, name);
  var res = it.next();
  while (!res.done) {
    res = it.next(tryRequireResolve(res.value, dirname));
  }
  return res.value;
}
function resolveStandardizedNameForImport(type, name, dirname) {
  var parentUrl = (0, _url().pathToFileURL)(_path().join(dirname, "./babel-virtual-resolve-base.js")).href;
  var it = resolveAlternativesHelper(type, name);
  var res = it.next();
  while (!res.done) {
    res = it.next(tryImportMetaResolve(res.value, parentUrl));
  }
  return (0, _url().fileURLToPath)(res.value);
}
function resolveStandardizedName(type, name, dirname, resolveESM) {
  if (!_moduleTypes.supportsESM || !resolveESM) {
    return resolveStandardizedNameForRequire(type, name, dirname);
  }
  try {
    var resolved = resolveStandardizedNameForImport(type, name, dirname);
    if (!(0, _fs().existsSync)(resolved)) {
      throw Object.assign(new Error("Could not resolve \"".concat(name, "\" in file ").concat(dirname, ".")), {
        type: "MODULE_NOT_FOUND"
      });
    }
    return resolved;
  } catch (e) {
    try {
      return resolveStandardizedNameForRequire(type, name, dirname);
    } catch (e2) {
      if (e.type === "MODULE_NOT_FOUND") throw e;
      if (e2.type === "MODULE_NOT_FOUND") throw e2;
      throw e;
    }
  }
}
{
  var LOADING_MODULES = new Set();
}
function requireModule(type, name) {
  return _regeneratorRuntime().wrap(function requireModule$(_context4) {
    while (1) switch (_context4.prev = _context4.next) {
      case 0:
        return _context4.delegateYield((0, _async.isAsync)(), "t1", 1);
      case 1:
        _context4.t0 = !_context4.t1;
        if (!_context4.t0) {
          _context4.next = 4;
          break;
        }
        _context4.t0 = LOADING_MODULES.has(name);
      case 4:
        if (!_context4.t0) {
          _context4.next = 6;
          break;
        }
        throw new Error("Reentrant ".concat(type, " detected trying to load \"").concat(name, "\". This module is not ignored ") + "and is trying to load itself while compiling itself, leading to a dependency cycle. " + 'We recommend adding it to your "ignore" list in your babelrc, or to a .babelignore.');
      case 6:
        _context4.prev = 6;
        LOADING_MODULES.add(name);
        return _context4.delegateYield((0, _moduleTypes["default"])(name, "You appear to be using a native ECMAScript module ".concat(type, ", ") + "which is only supported when running Babel asynchronously.", true), "t2", 9);
      case 9:
        return _context4.abrupt("return", _context4.t2);
      case 12:
        _context4.prev = 12;
        _context4.t3 = _context4["catch"](6);
        _context4.t3.message = "[BABEL]: ".concat(_context4.t3.message, " (While processing: ").concat(name, ")");
        throw _context4.t3;
      case 16:
        _context4.prev = 16;
        LOADING_MODULES["delete"](name);
        return _context4.finish(16);
      case 19:
      case "end":
        return _context4.stop();
    }
  }, _marked4, null, [[6, 12, 16, 19]]);
}
0 && 0;