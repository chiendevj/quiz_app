"use strict";

function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var _marked = /*#__PURE__*/_regeneratorRuntime().mark(readConfigCode),
  _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(findRelativeConfig),
  _marked3 = /*#__PURE__*/_regeneratorRuntime().mark(loadConfig),
  _marked4 = /*#__PURE__*/_regeneratorRuntime().mark(resolveShowConfigPath);
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ROOT_CONFIG_FILENAMES = void 0;
exports.findConfigUpwards = findConfigUpwards;
exports.findRelativeConfig = findRelativeConfig;
exports.findRootConfig = findRootConfig;
exports.loadConfig = loadConfig;
exports.resolveShowConfigPath = resolveShowConfigPath;
function _debug() {
  var data = require("debug");
  _debug = function _debug() {
    return data;
  };
  return data;
}
function _fs() {
  var data = require("fs");
  _fs = function _fs() {
    return data;
  };
  return data;
}
function _path() {
  var data = require("path");
  _path = function _path() {
    return data;
  };
  return data;
}
function _json() {
  var data = require("json5");
  _json = function _json() {
    return data;
  };
  return data;
}
function _gensync() {
  var data = require("gensync");
  _gensync = function _gensync() {
    return data;
  };
  return data;
}
var _caching = require("../caching.js");
var _configApi = require("../helpers/config-api.js");
var _utils = require("./utils.js");
var _moduleTypes = require("./module-types.js");
var _patternToRegex = require("../pattern-to-regex.js");
var _configError = require("../../errors/config-error.js");
var fs = require("../../gensync-utils/fs.js");
var _rewriteStackTrace = require("../../errors/rewrite-stack-trace.js");
var debug = _debug()("babel:config:loading:files:configuration");
var ROOT_CONFIG_FILENAMES = exports.ROOT_CONFIG_FILENAMES = ["babel.config.js", "babel.config.cjs", "babel.config.mjs", "babel.config.json", "babel.config.cts"];
var RELATIVE_CONFIG_FILENAMES = [".babelrc", ".babelrc.js", ".babelrc.cjs", ".babelrc.mjs", ".babelrc.json", ".babelrc.cts"];
var BABELIGNORE_FILENAME = ".babelignore";
var runConfig = (0, _caching.makeWeakCache)( /*#__PURE__*/_regeneratorRuntime().mark(function runConfig(options, cache) {
  return _regeneratorRuntime().wrap(function runConfig$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        return _context.delegateYield([], "t0", 1);
      case 1:
        return _context.abrupt("return", {
          options: (0, _rewriteStackTrace.endHiddenCallStack)(options)((0, _configApi.makeConfigAPI)(cache)),
          cacheNeedsConfiguration: !cache.configured()
        });
      case 2:
      case "end":
        return _context.stop();
    }
  }, runConfig);
}));
function readConfigCode(filepath, data) {
  var options, cacheNeedsConfiguration, _yield$runConfig;
  return _regeneratorRuntime().wrap(function readConfigCode$(_context2) {
    while (1) switch (_context2.prev = _context2.next) {
      case 0:
        if (_fs().existsSync(filepath)) {
          _context2.next = 2;
          break;
        }
        return _context2.abrupt("return", null);
      case 2:
        return _context2.delegateYield((0, _moduleTypes["default"])(filepath, "You appear to be using a native ECMAScript module configuration " + "file, which is only supported when running Babel asynchronously."), "t0", 3);
      case 3:
        options = _context2.t0;
        cacheNeedsConfiguration = false;
        if (!(typeof options === "function")) {
          _context2.next = 10;
          break;
        }
        return _context2.delegateYield(runConfig(options, data), "t1", 7);
      case 7:
        _yield$runConfig = _context2.t1;
        options = _yield$runConfig.options;
        cacheNeedsConfiguration = _yield$runConfig.cacheNeedsConfiguration;
      case 10:
        if (!(!options || _typeof(options) !== "object" || Array.isArray(options))) {
          _context2.next = 12;
          break;
        }
        throw new _configError["default"]("Configuration should be an exported JavaScript object.", filepath);
      case 12:
        if (!(typeof options.then === "function")) {
          _context2.next = 15;
          break;
        }
        options["catch"] == null || options["catch"](function () {});
        throw new _configError["default"]("You appear to be using an async configuration, " + "which your current version of Babel does not support. " + "We may add support for this in the future, " + "but if you're on the most recent version of @babel/core and still " + "seeing this error, then you'll need to synchronously return your config.", filepath);
      case 15:
        if (cacheNeedsConfiguration) throwConfigError(filepath);
        return _context2.abrupt("return", buildConfigFileObject(options, filepath));
      case 17:
      case "end":
        return _context2.stop();
    }
  }, _marked);
}
var cfboaf = new WeakMap();
function buildConfigFileObject(options, filepath) {
  var configFilesByFilepath = cfboaf.get(options);
  if (!configFilesByFilepath) {
    cfboaf.set(options, configFilesByFilepath = new Map());
  }
  var configFile = configFilesByFilepath.get(filepath);
  if (!configFile) {
    configFile = {
      filepath: filepath,
      dirname: _path().dirname(filepath),
      options: options
    };
    configFilesByFilepath.set(filepath, configFile);
  }
  return configFile;
}
var packageToBabelConfig = (0, _caching.makeWeakCacheSync)(function (file) {
  var babel = file.options["babel"];
  if (typeof babel === "undefined") return null;
  if (_typeof(babel) !== "object" || Array.isArray(babel) || babel === null) {
    throw new _configError["default"](".babel property must be an object", file.filepath);
  }
  return {
    filepath: file.filepath,
    dirname: file.dirname,
    options: babel
  };
});
var readConfigJSON5 = (0, _utils.makeStaticFileCache)(function (filepath, content) {
  var options;
  try {
    options = _json().parse(content);
  } catch (err) {
    throw new _configError["default"]("Error while parsing config - ".concat(err.message), filepath);
  }
  if (!options) throw new _configError["default"]("No config detected", filepath);
  if (_typeof(options) !== "object") {
    throw new _configError["default"]("Config returned typeof ".concat(_typeof(options)), filepath);
  }
  if (Array.isArray(options)) {
    throw new _configError["default"]("Expected config object but found array", filepath);
  }
  delete options["$schema"];
  return {
    filepath: filepath,
    dirname: _path().dirname(filepath),
    options: options
  };
});
var readIgnoreConfig = (0, _utils.makeStaticFileCache)(function (filepath, content) {
  var ignoreDir = _path().dirname(filepath);
  var ignorePatterns = content.split("\n").map(function (line) {
    return line.replace(/#(.*?)$/, "").trim();
  }).filter(function (line) {
    return !!line;
  });
  var _iterator = _createForOfIteratorHelper(ignorePatterns),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var pattern = _step.value;
      if (pattern[0] === "!") {
        throw new _configError["default"]("Negation of file paths is not supported.", filepath);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return {
    filepath: filepath,
    dirname: _path().dirname(filepath),
    ignore: ignorePatterns.map(function (pattern) {
      return (0, _patternToRegex["default"])(pattern, ignoreDir);
    })
  };
});
function findConfigUpwards(rootDir) {
  var dirname = rootDir;
  for (;;) {
    var _iterator2 = _createForOfIteratorHelper(ROOT_CONFIG_FILENAMES),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var filename = _step2.value;
        if (_fs().existsSync(_path().join(dirname, filename))) {
          return dirname;
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    var nextDir = _path().dirname(dirname);
    if (dirname === nextDir) break;
    dirname = nextDir;
  }
  return null;
}
function findRelativeConfig(packageData, envName, caller) {
  var config, ignore, dirname, _iterator3, _step3, loc, _packageData$pkg, ignoreLoc;
  return _regeneratorRuntime().wrap(function findRelativeConfig$(_context3) {
    while (1) switch (_context3.prev = _context3.next) {
      case 0:
        config = null;
        ignore = null;
        dirname = _path().dirname(packageData.filepath);
        _iterator3 = _createForOfIteratorHelper(packageData.directories);
        _context3.prev = 4;
        _iterator3.s();
      case 6:
        if ((_step3 = _iterator3.n()).done) {
          _context3.next = 18;
          break;
        }
        loc = _step3.value;
        if (config) {
          _context3.next = 11;
          break;
        }
        return _context3.delegateYield(loadOneConfig(RELATIVE_CONFIG_FILENAMES, loc, envName, caller, ((_packageData$pkg = packageData.pkg) == null ? void 0 : _packageData$pkg.dirname) === loc ? packageToBabelConfig(packageData.pkg) : null), "t0", 10);
      case 10:
        config = _context3.t0;
      case 11:
        if (ignore) {
          _context3.next = 16;
          break;
        }
        ignoreLoc = _path().join(loc, BABELIGNORE_FILENAME);
        return _context3.delegateYield(readIgnoreConfig(ignoreLoc), "t1", 14);
      case 14:
        ignore = _context3.t1;
        if (ignore) {
          debug("Found ignore %o from %o.", ignore.filepath, dirname);
        }
      case 16:
        _context3.next = 6;
        break;
      case 18:
        _context3.next = 23;
        break;
      case 20:
        _context3.prev = 20;
        _context3.t2 = _context3["catch"](4);
        _iterator3.e(_context3.t2);
      case 23:
        _context3.prev = 23;
        _iterator3.f();
        return _context3.finish(23);
      case 26:
        return _context3.abrupt("return", {
          config: config,
          ignore: ignore
        });
      case 27:
      case "end":
        return _context3.stop();
    }
  }, _marked2, null, [[4, 20, 23, 26]]);
}
function findRootConfig(dirname, envName, caller) {
  return loadOneConfig(ROOT_CONFIG_FILENAMES, dirname, envName, caller);
}
function loadOneConfig(names, dirname, envName, caller) {
  var previousConfig = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var configs, config;
    return _regeneratorRuntime().wrap(function _callee$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          return _context4.delegateYield(_gensync().all(names.map(function (filename) {
            return readConfig(_path().join(dirname, filename), envName, caller);
          })), "t0", 1);
        case 1:
          configs = _context4.t0;
          config = configs.reduce(function (previousConfig, config) {
            if (config && previousConfig) {
              throw new _configError["default"]("Multiple configuration files found. Please remove one:\n" + " - ".concat(_path().basename(previousConfig.filepath), "\n") + " - ".concat(config.filepath, "\n") + "from ".concat(dirname));
            }
            return config || previousConfig;
          }, previousConfig);
          if (config) {
            debug("Found configuration %o from %o.", config.filepath, dirname);
          }
          return _context4.abrupt("return", config);
        case 5:
        case "end":
          return _context4.stop();
      }
    }, _callee);
  })();
}
function loadConfig(name, dirname, envName, caller) {
  var filepath, conf;
  return _regeneratorRuntime().wrap(function loadConfig$(_context5) {
    while (1) switch (_context5.prev = _context5.next) {
      case 0:
        filepath = (function (v, w) {
          return v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1];
        }(process.versions.node, "8.9") ? require.resolve : function (r, _ref) {
          var _ref$paths = _slicedToArray(_ref.paths, 1),
            b = _ref$paths[0];
          var M = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : require("module");
          var f = M._findPath(r, M._nodeModulePaths(b).concat(b));
          if (f) return f;
          f = new Error("Cannot resolve module '".concat(r, "'"));
          f.code = "MODULE_NOT_FOUND";
          throw f;
        })(name, {
          paths: [dirname]
        });
        return _context5.delegateYield(readConfig(filepath, envName, caller), "t0", 2);
      case 2:
        conf = _context5.t0;
        if (conf) {
          _context5.next = 5;
          break;
        }
        throw new _configError["default"]("Config file contains no configuration data", filepath);
      case 5:
        debug("Loaded config %o from %o.", name, dirname);
        return _context5.abrupt("return", conf);
      case 7:
      case "end":
        return _context5.stop();
    }
  }, _marked3);
}
function readConfig(filepath, envName, caller) {
  var ext = _path().extname(filepath);
  switch (ext) {
    case ".js":
    case ".cjs":
    case ".mjs":
    case ".cts":
      return readConfigCode(filepath, {
        envName: envName,
        caller: caller
      });
    default:
      return readConfigJSON5(filepath);
  }
}
function resolveShowConfigPath(dirname) {
  var targetPath, absolutePath, stats;
  return _regeneratorRuntime().wrap(function resolveShowConfigPath$(_context6) {
    while (1) switch (_context6.prev = _context6.next) {
      case 0:
        targetPath = process.env.BABEL_SHOW_CONFIG_FOR;
        if (!(targetPath != null)) {
          _context6.next = 8;
          break;
        }
        absolutePath = _path().resolve(dirname, targetPath);
        return _context6.delegateYield(fs.stat(absolutePath), "t0", 4);
      case 4:
        stats = _context6.t0;
        if (stats.isFile()) {
          _context6.next = 7;
          break;
        }
        throw new Error("".concat(absolutePath, ": BABEL_SHOW_CONFIG_FOR must refer to a regular file, directories are not supported."));
      case 7:
        return _context6.abrupt("return", absolutePath);
      case 8:
        return _context6.abrupt("return", null);
      case 9:
      case "end":
        return _context6.stop();
    }
  }, _marked4);
}
function throwConfigError(filepath) {
  throw new _configError["default"]("Caching was left unconfigured. Babel's plugins, presets, and .babelrc.js files can be configured\nfor various types of caching, using the first param of their handler functions:\n\nmodule.exports = function(api) {\n  // The API exposes the following:\n\n  // Cache the returned value forever and don't call this function again.\n  api.cache(true);\n\n  // Don't cache at all. Not recommended because it will be very slow.\n  api.cache(false);\n\n  // Cached based on the value of some function. If this function returns a value different from\n  // a previously-encountered value, the plugins will re-evaluate.\n  var env = api.cache(() => process.env.NODE_ENV);\n\n  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for\n  // any possible NODE_ENV value that might come up during plugin execution.\n  var isProd = api.cache(() => process.env.NODE_ENV === \"production\");\n\n  // .cache(fn) will perform a linear search though instances to find the matching plugin based\n  // based on previous instantiated plugins. If you want to recreate the plugin and discard the\n  // previous instance whenever something changes, you may use:\n  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === \"production\");\n\n  // Note, we also expose the following more-verbose versions of the above examples:\n  api.cache.forever(); // api.cache(true)\n  api.cache.never();   // api.cache(false)\n  api.cache.using(fn); // api.cache(fn)\n\n  // Return the value that will be cached.\n  return { };\n};", filepath);
}
0 && 0;