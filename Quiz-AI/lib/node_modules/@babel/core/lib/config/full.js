"use strict";

var _marked = /*#__PURE__*/_regeneratorRuntime().mark(loadPluginDescriptor),
  _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(loadPresetDescriptor);
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _gensync() {
  var data = require("gensync");
  _gensync = function _gensync() {
    return data;
  };
  return data;
}
var _async = require("../gensync-utils/async.js");
var _util = require("./util.js");
var context = require("../index.js");
var _plugin = require("./plugin.js");
var _item = require("./item.js");
var _configChain = require("./config-chain.js");
var _deepArray = require("./helpers/deep-array.js");
function _traverse() {
  var data = require("@babel/traverse");
  _traverse = function _traverse() {
    return data;
  };
  return data;
}
var _caching = require("./caching.js");
var _options = require("./validation/options.js");
var _plugins = require("./validation/plugins.js");
var _configApi = require("./helpers/config-api.js");
var _partial = require("./partial.js");
var _configError = require("../errors/config-error.js");
var _default = exports["default"] = _gensync()( /*#__PURE__*/_regeneratorRuntime().mark(function loadFullConfig(inputOpts) {
  var _opts$assumptions, result, options, context, fileHandling, optionDefaults, plugins, presets, presetContext, toDescriptor, presetsDescriptors, initialPluginsDescriptors, pluginDescriptorsByPass, passes, externalDependencies, ignored, opts, pluginContext;
  return _regeneratorRuntime().wrap(function loadFullConfig$(_context3) {
    while (1) switch (_context3.prev = _context3.next) {
      case 0:
        return _context3.delegateYield((0, _partial["default"])(inputOpts), "t0", 1);
      case 1:
        result = _context3.t0;
        if (result) {
          _context3.next = 4;
          break;
        }
        return _context3.abrupt("return", null);
      case 4:
        options = result.options, context = result.context, fileHandling = result.fileHandling;
        if (!(fileHandling === "ignored")) {
          _context3.next = 7;
          break;
        }
        return _context3.abrupt("return", null);
      case 7:
        optionDefaults = {};
        plugins = options.plugins, presets = options.presets;
        if (!(!plugins || !presets)) {
          _context3.next = 11;
          break;
        }
        throw new Error("Assertion failure - plugins and presets exist");
      case 11:
        presetContext = Object.assign({}, context, {
          targets: options.targets
        });
        toDescriptor = function toDescriptor(item) {
          var desc = (0, _item.getItemDescriptor)(item);
          if (!desc) {
            throw new Error("Assertion failure - must be config item");
          }
          return desc;
        };
        presetsDescriptors = presets.map(toDescriptor);
        initialPluginsDescriptors = plugins.map(toDescriptor);
        pluginDescriptorsByPass = [[]];
        passes = [];
        externalDependencies = [];
        return _context3.delegateYield(enhanceError(context, /*#__PURE__*/_regeneratorRuntime().mark(function recursePresetDescriptors(rawPresets, pluginDescriptorsPass) {
          var presets, i, descriptor, preset, _iterator, _step, _step$value, _preset, pass, _ignored;
          return _regeneratorRuntime().wrap(function recursePresetDescriptors$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                presets = [];
                i = 0;
              case 2:
                if (!(i < rawPresets.length)) {
                  _context.next = 19;
                  break;
                }
                descriptor = rawPresets[i];
                if (!(descriptor.options !== false)) {
                  _context.next = 16;
                  break;
                }
                _context.prev = 5;
                return _context.delegateYield(loadPresetDescriptor(descriptor, presetContext), "t0", 7);
              case 7:
                preset = _context.t0;
                _context.next = 14;
                break;
              case 10:
                _context.prev = 10;
                _context.t1 = _context["catch"](5);
                if (_context.t1.code === "BABEL_UNKNOWN_OPTION") {
                  (0, _options.checkNoUnwrappedItemOptionPairs)(rawPresets, i, "preset", _context.t1);
                }
                throw _context.t1;
              case 14:
                externalDependencies.push(preset.externalDependencies);
                if (descriptor.ownPass) {
                  presets.push({
                    preset: preset.chain,
                    pass: []
                  });
                } else {
                  presets.unshift({
                    preset: preset.chain,
                    pass: pluginDescriptorsPass
                  });
                }
              case 16:
                i++;
                _context.next = 2;
                break;
              case 19:
                if (!(presets.length > 0)) {
                  _context.next = 44;
                  break;
                }
                pluginDescriptorsByPass.splice.apply(pluginDescriptorsByPass, [1, 0].concat(_toConsumableArray(presets.map(function (o) {
                  return o.pass;
                }).filter(function (p) {
                  return p !== pluginDescriptorsPass;
                }))));
                _iterator = _createForOfIteratorHelper(presets);
                _context.prev = 22;
                _iterator.s();
              case 24:
                if ((_step = _iterator.n()).done) {
                  _context.next = 36;
                  break;
                }
                _step$value = _step.value, _preset = _step$value.preset, pass = _step$value.pass;
                if (_preset) {
                  _context.next = 28;
                  break;
                }
                return _context.abrupt("return", true);
              case 28:
                pass.push.apply(pass, _toConsumableArray(_preset.plugins));
                return _context.delegateYield(recursePresetDescriptors(_preset.presets, pass), "t2", 30);
              case 30:
                _ignored = _context.t2;
                if (!_ignored) {
                  _context.next = 33;
                  break;
                }
                return _context.abrupt("return", true);
              case 33:
                _preset.options.forEach(function (opts) {
                  (0, _util.mergeOptions)(optionDefaults, opts);
                });
              case 34:
                _context.next = 24;
                break;
              case 36:
                _context.next = 41;
                break;
              case 38:
                _context.prev = 38;
                _context.t3 = _context["catch"](22);
                _iterator.e(_context.t3);
              case 41:
                _context.prev = 41;
                _iterator.f();
                return _context.finish(41);
              case 44:
              case "end":
                return _context.stop();
            }
          }, recursePresetDescriptors, null, [[5, 10], [22, 38, 41, 44]]);
        }))(presetsDescriptors, pluginDescriptorsByPass[0]), "t1", 19);
      case 19:
        ignored = _context3.t1;
        if (!ignored) {
          _context3.next = 22;
          break;
        }
        return _context3.abrupt("return", null);
      case 22:
        opts = optionDefaults;
        (0, _util.mergeOptions)(opts, options);
        pluginContext = Object.assign({}, presetContext, {
          assumptions: (_opts$assumptions = opts.assumptions) != null ? _opts$assumptions : {}
        });
        return _context3.delegateYield(enhanceError(context, /*#__PURE__*/_regeneratorRuntime().mark(function loadPluginDescriptors() {
          var _pluginDescriptorsByP;
          var _i, _pluginDescriptorsByP2, descs, pass, i, descriptor, plugin;
          return _regeneratorRuntime().wrap(function loadPluginDescriptors$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                (_pluginDescriptorsByP = pluginDescriptorsByPass[0]).unshift.apply(_pluginDescriptorsByP, _toConsumableArray(initialPluginsDescriptors));
                _i = 0, _pluginDescriptorsByP2 = pluginDescriptorsByPass;
              case 2:
                if (!(_i < _pluginDescriptorsByP2.length)) {
                  _context2.next = 27;
                  break;
                }
                descs = _pluginDescriptorsByP2[_i];
                pass = [];
                passes.push(pass);
                i = 0;
              case 7:
                if (!(i < descs.length)) {
                  _context2.next = 24;
                  break;
                }
                descriptor = descs[i];
                if (!(descriptor.options !== false)) {
                  _context2.next = 21;
                  break;
                }
                _context2.prev = 10;
                return _context2.delegateYield(loadPluginDescriptor(descriptor, pluginContext), "t0", 12);
              case 12:
                plugin = _context2.t0;
                _context2.next = 19;
                break;
              case 15:
                _context2.prev = 15;
                _context2.t1 = _context2["catch"](10);
                if (_context2.t1.code === "BABEL_UNKNOWN_PLUGIN_PROPERTY") {
                  (0, _options.checkNoUnwrappedItemOptionPairs)(descs, i, "plugin", _context2.t1);
                }
                throw _context2.t1;
              case 19:
                pass.push(plugin);
                externalDependencies.push(plugin.externalDependencies);
              case 21:
                i++;
                _context2.next = 7;
                break;
              case 24:
                _i++;
                _context2.next = 2;
                break;
              case 27:
              case "end":
                return _context2.stop();
            }
          }, loadPluginDescriptors, null, [[10, 15]]);
        }))(), "t2", 26);
      case 26:
        opts.plugins = passes[0];
        opts.presets = passes.slice(1).filter(function (plugins) {
          return plugins.length > 0;
        }).map(function (plugins) {
          return {
            plugins: plugins
          };
        });
        opts.passPerPreset = opts.presets.length > 0;
        return _context3.abrupt("return", {
          options: opts,
          passes: passes,
          externalDependencies: (0, _deepArray.finalize)(externalDependencies)
        });
      case 30:
      case "end":
        return _context3.stop();
    }
  }, loadFullConfig);
}));
function enhanceError(context, fn) {
  return /*#__PURE__*/_regeneratorRuntime().mark(function _callee(arg1, arg2) {
    var _context$filename;
    return _regeneratorRuntime().wrap(function _callee$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          return _context4.delegateYield(fn(arg1, arg2), "t0", 2);
        case 2:
          return _context4.abrupt("return", _context4.t0);
        case 5:
          _context4.prev = 5;
          _context4.t1 = _context4["catch"](0);
          if (!/^\[BABEL\]/.test(_context4.t1.message)) {
            _context4.t1.message = "[BABEL] ".concat((_context$filename = context.filename) != null ? _context$filename : "unknown file", ": ").concat(_context4.t1.message);
          }
          throw _context4.t1;
        case 9:
        case "end":
          return _context4.stop();
      }
    }, _callee, null, [[0, 5]]);
  });
}
var makeDescriptorLoader = function makeDescriptorLoader(apiFactory) {
  return (0, _caching.makeWeakCache)(function (_ref, cache) {
    var value = _ref.value,
      options = _ref.options,
      dirname = _ref.dirname,
      alias = _ref.alias;
    return /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      var externalDependencies, item, factory, api, error;
      return _regeneratorRuntime().wrap(function _callee2$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            if (!(options === false)) {
              _context5.next = 2;
              break;
            }
            throw new Error("Assertion failure");
          case 2:
            options = options || {};
            externalDependencies = [];
            item = value;
            if (!(typeof value === "function")) {
              _context5.next = 17;
              break;
            }
            factory = (0, _async.maybeAsync)(value, "You appear to be using an async plugin/preset, but Babel has been called synchronously");
            api = Object.assign({}, context, apiFactory(cache, externalDependencies));
            _context5.prev = 8;
            return _context5.delegateYield(factory(api, options, dirname), "t0", 10);
          case 10:
            item = _context5.t0;
            _context5.next = 17;
            break;
          case 13:
            _context5.prev = 13;
            _context5.t1 = _context5["catch"](8);
            if (alias) {
              _context5.t1.message += " (While processing: ".concat(JSON.stringify(alias), ")");
            }
            throw _context5.t1;
          case 17:
            if (!(!item || _typeof(item) !== "object")) {
              _context5.next = 19;
              break;
            }
            throw new Error("Plugin/Preset did not return an object.");
          case 19:
            if (!(0, _async.isThenable)(item)) {
              _context5.next = 22;
              break;
            }
            return _context5.delegateYield([], "t2", 21);
          case 21:
            throw new Error("You appear to be using a promise as a plugin, " + "which your current version of Babel does not support. " + "If you're using a published plugin, " + "you may need to upgrade your @babel/core version. " + "As an alternative, you can prefix the promise with \"await\". " + "(While processing: ".concat(JSON.stringify(alias), ")"));
          case 22:
            if (!(externalDependencies.length > 0 && (!cache.configured() || cache.mode() === "forever"))) {
              _context5.next = 27;
              break;
            }
            error = "A plugin/preset has external untracked dependencies " + "(".concat(externalDependencies[0], "), but the cache ");
            if (!cache.configured()) {
              error += "has not been configured to be invalidated when the external dependencies change. ";
            } else {
              error += " has been configured to never be invalidated. ";
            }
            error += "Plugins/presets should configure their cache to be invalidated when the external " + "dependencies change, for example using `api.cache.invalidate(() => " + "statSync(filepath).mtimeMs)` or `api.cache.never()`\n" + "(While processing: ".concat(JSON.stringify(alias), ")");
            throw new Error(error);
          case 27:
            return _context5.abrupt("return", {
              value: item,
              options: options,
              dirname: dirname,
              alias: alias,
              externalDependencies: (0, _deepArray.finalize)(externalDependencies)
            });
          case 28:
          case "end":
            return _context5.stop();
        }
      }, _callee2, null, [[8, 13]]);
    })();
  });
};
var pluginDescriptorLoader = makeDescriptorLoader(_configApi.makePluginAPI);
var presetDescriptorLoader = makeDescriptorLoader(_configApi.makePresetAPI);
var instantiatePlugin = (0, _caching.makeWeakCache)(function (_ref2, cache) {
  var value = _ref2.value,
    options = _ref2.options,
    dirname = _ref2.dirname,
    alias = _ref2.alias,
    externalDependencies = _ref2.externalDependencies;
  return /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    var pluginObj, plugin, inheritsDescriptor, inherits;
    return _regeneratorRuntime().wrap(function _callee3$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          pluginObj = (0, _plugins.validatePluginObject)(value);
          plugin = Object.assign({}, pluginObj);
          if (plugin.visitor) {
            plugin.visitor = _traverse()["default"].explode(Object.assign({}, plugin.visitor));
          }
          if (!plugin.inherits) {
            _context6.next = 12;
            break;
          }
          inheritsDescriptor = {
            name: undefined,
            alias: "".concat(alias, "$inherits"),
            value: plugin.inherits,
            options: options,
            dirname: dirname
          };
          return _context6.delegateYield((0, _async.forwardAsync)(loadPluginDescriptor, function (run) {
            return cache.invalidate(function (data) {
              return run(inheritsDescriptor, data);
            });
          }), "t0", 6);
        case 6:
          inherits = _context6.t0;
          plugin.pre = chain(inherits.pre, plugin.pre);
          plugin.post = chain(inherits.post, plugin.post);
          plugin.manipulateOptions = chain(inherits.manipulateOptions, plugin.manipulateOptions);
          plugin.visitor = _traverse()["default"].visitors.merge([inherits.visitor || {}, plugin.visitor || {}]);
          if (inherits.externalDependencies.length > 0) {
            if (externalDependencies.length === 0) {
              externalDependencies = inherits.externalDependencies;
            } else {
              externalDependencies = (0, _deepArray.finalize)([externalDependencies, inherits.externalDependencies]);
            }
          }
        case 12:
          return _context6.abrupt("return", new _plugin["default"](plugin, options, alias, externalDependencies));
        case 13:
        case "end":
          return _context6.stop();
      }
    }, _callee3);
  })();
});
function loadPluginDescriptor(descriptor, context) {
  return _regeneratorRuntime().wrap(function loadPluginDescriptor$(_context7) {
    while (1) switch (_context7.prev = _context7.next) {
      case 0:
        if (!(descriptor.value instanceof _plugin["default"])) {
          _context7.next = 4;
          break;
        }
        if (!descriptor.options) {
          _context7.next = 3;
          break;
        }
        throw new Error("Passed options to an existing Plugin instance will not work.");
      case 3:
        return _context7.abrupt("return", descriptor.value);
      case 4:
        _context7.t0 = instantiatePlugin;
        return _context7.delegateYield(pluginDescriptorLoader(descriptor, context), "t1", 6);
      case 6:
        _context7.t2 = _context7.t1;
        _context7.t3 = context;
        return _context7.delegateYield((0, _context7.t0)(_context7.t2, _context7.t3), "t4", 9);
      case 9:
        return _context7.abrupt("return", _context7.t4);
      case 10:
      case "end":
        return _context7.stop();
    }
  }, _marked);
}
var needsFilename = function needsFilename(val) {
  return val && typeof val !== "function";
};
var validateIfOptionNeedsFilename = function validateIfOptionNeedsFilename(options, descriptor) {
  if (needsFilename(options.test) || needsFilename(options.include) || needsFilename(options.exclude)) {
    var formattedPresetName = descriptor.name ? "\"".concat(descriptor.name, "\"") : "/* your preset */";
    throw new _configError["default"](["Preset ".concat(formattedPresetName, " requires a filename to be set when babel is called directly,"), "```", "babel.transformSync(code, { filename: 'file.ts', presets: [".concat(formattedPresetName, "] });"), "```", "See https://babeljs.io/docs/en/options#filename for more information."].join("\n"));
  }
};
var validatePreset = function validatePreset(preset, context, descriptor) {
  if (!context.filename) {
    var _options$overrides;
    var options = preset.options;
    validateIfOptionNeedsFilename(options, descriptor);
    (_options$overrides = options.overrides) == null || _options$overrides.forEach(function (overrideOptions) {
      return validateIfOptionNeedsFilename(overrideOptions, descriptor);
    });
  }
};
var instantiatePreset = (0, _caching.makeWeakCacheSync)(function (_ref3) {
  var value = _ref3.value,
    dirname = _ref3.dirname,
    alias = _ref3.alias,
    externalDependencies = _ref3.externalDependencies;
  return {
    options: (0, _options.validate)("preset", value),
    alias: alias,
    dirname: dirname,
    externalDependencies: externalDependencies
  };
});
function loadPresetDescriptor(descriptor, context) {
  var preset;
  return _regeneratorRuntime().wrap(function loadPresetDescriptor$(_context8) {
    while (1) switch (_context8.prev = _context8.next) {
      case 0:
        _context8.t0 = instantiatePreset;
        return _context8.delegateYield(presetDescriptorLoader(descriptor, context), "t1", 2);
      case 2:
        _context8.t2 = _context8.t1;
        preset = (0, _context8.t0)(_context8.t2);
        validatePreset(preset, context, descriptor);
        return _context8.delegateYield((0, _configChain.buildPresetChain)(preset, context), "t3", 6);
      case 6:
        _context8.t4 = _context8.t3;
        _context8.t5 = preset.externalDependencies;
        return _context8.abrupt("return", {
          chain: _context8.t4,
          externalDependencies: _context8.t5
        });
      case 9:
      case "end":
        return _context8.stop();
    }
  }, _marked2);
}
function chain(a, b) {
  var fns = [a, b].filter(Boolean);
  if (fns.length <= 1) return fns[0];
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var _iterator2 = _createForOfIteratorHelper(fns),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var fn = _step2.value;
        fn.apply(this, args);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  };
}
0 && 0;