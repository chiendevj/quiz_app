"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
var _marked = /*#__PURE__*/_regeneratorRuntime().mark(genTrue),
  _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(getCachedValue),
  _marked3 = /*#__PURE__*/_regeneratorRuntime().mark(getCachedValueOrWait);
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertSimpleType = assertSimpleType;
exports.makeStrongCache = makeStrongCache;
exports.makeStrongCacheSync = makeStrongCacheSync;
exports.makeWeakCache = makeWeakCache;
exports.makeWeakCacheSync = makeWeakCacheSync;
function _gensync() {
  var data = require("gensync");
  _gensync = function _gensync() {
    return data;
  };
  return data;
}
var _async = require("../gensync-utils/async.js");
var _util = require("./util.js");
var synchronize = function synchronize(gen) {
  return _gensync()(gen).sync;
};
function genTrue() {
  return _regeneratorRuntime().wrap(function genTrue$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        return _context.abrupt("return", true);
      case 1:
      case "end":
        return _context.stop();
    }
  }, _marked);
}
function makeWeakCache(handler) {
  return makeCachedFunction(WeakMap, handler);
}
function makeWeakCacheSync(handler) {
  return synchronize(makeWeakCache(handler));
}
function makeStrongCache(handler) {
  return makeCachedFunction(Map, handler);
}
function makeStrongCacheSync(handler) {
  return synchronize(makeStrongCache(handler));
}
function makeCachedFunction(CallCache, handler) {
  var callCacheSync = new CallCache();
  var callCacheAsync = new CallCache();
  var futureCache = new CallCache();
  return /*#__PURE__*/_regeneratorRuntime().mark(function cachedFunction(arg, data) {
    var asyncContext, callCache, cached, cache, handlerResult, finishLock, value;
    return _regeneratorRuntime().wrap(function cachedFunction$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          return _context2.delegateYield((0, _async.isAsync)(), "t0", 1);
        case 1:
          asyncContext = _context2.t0;
          callCache = asyncContext ? callCacheAsync : callCacheSync;
          return _context2.delegateYield(getCachedValueOrWait(asyncContext, callCache, futureCache, arg, data), "t1", 4);
        case 4:
          cached = _context2.t1;
          if (!cached.valid) {
            _context2.next = 7;
            break;
          }
          return _context2.abrupt("return", cached.value);
        case 7:
          cache = new CacheConfigurator(data);
          handlerResult = handler(arg, cache);
          if (!(0, _util.isIterableIterator)(handlerResult)) {
            _context2.next = 14;
            break;
          }
          return _context2.delegateYield((0, _async.onFirstPause)(handlerResult, function () {
            finishLock = setupAsyncLocks(cache, futureCache, arg);
          }), "t2", 11);
        case 11:
          value = _context2.t2;
          _context2.next = 15;
          break;
        case 14:
          value = handlerResult;
        case 15:
          updateFunctionCache(callCache, cache, arg, value);
          if (finishLock) {
            futureCache["delete"](arg);
            finishLock.release(value);
          }
          return _context2.abrupt("return", value);
        case 18:
        case "end":
          return _context2.stop();
      }
    }, cachedFunction);
  });
}
function getCachedValue(cache, arg, data) {
  var cachedValue, _iterator, _step, _step$value, value, valid;
  return _regeneratorRuntime().wrap(function getCachedValue$(_context3) {
    while (1) switch (_context3.prev = _context3.next) {
      case 0:
        cachedValue = cache.get(arg);
        if (!cachedValue) {
          _context3.next = 20;
          break;
        }
        _iterator = _createForOfIteratorHelper(cachedValue);
        _context3.prev = 3;
        _iterator.s();
      case 5:
        if ((_step = _iterator.n()).done) {
          _context3.next = 12;
          break;
        }
        _step$value = _step.value, value = _step$value.value, valid = _step$value.valid;
        return _context3.delegateYield(valid(data), "t0", 8);
      case 8:
        if (!_context3.t0) {
          _context3.next = 10;
          break;
        }
        return _context3.abrupt("return", {
          valid: true,
          value: value
        });
      case 10:
        _context3.next = 5;
        break;
      case 12:
        _context3.next = 17;
        break;
      case 14:
        _context3.prev = 14;
        _context3.t1 = _context3["catch"](3);
        _iterator.e(_context3.t1);
      case 17:
        _context3.prev = 17;
        _iterator.f();
        return _context3.finish(17);
      case 20:
        return _context3.abrupt("return", {
          valid: false,
          value: null
        });
      case 21:
      case "end":
        return _context3.stop();
    }
  }, _marked2, null, [[3, 14, 17, 20]]);
}
function getCachedValueOrWait(asyncContext, callCache, futureCache, arg, data) {
  var cached, _cached, value;
  return _regeneratorRuntime().wrap(function getCachedValueOrWait$(_context4) {
    while (1) switch (_context4.prev = _context4.next) {
      case 0:
        return _context4.delegateYield(getCachedValue(callCache, arg, data), "t0", 1);
      case 1:
        cached = _context4.t0;
        if (!cached.valid) {
          _context4.next = 4;
          break;
        }
        return _context4.abrupt("return", cached);
      case 4:
        if (!asyncContext) {
          _context4.next = 11;
          break;
        }
        return _context4.delegateYield(getCachedValue(futureCache, arg, data), "t1", 6);
      case 6:
        _cached = _context4.t1;
        if (!_cached.valid) {
          _context4.next = 11;
          break;
        }
        return _context4.delegateYield((0, _async.waitFor)(_cached.value.promise), "t2", 9);
      case 9:
        value = _context4.t2;
        return _context4.abrupt("return", {
          valid: true,
          value: value
        });
      case 11:
        return _context4.abrupt("return", {
          valid: false,
          value: null
        });
      case 12:
      case "end":
        return _context4.stop();
    }
  }, _marked3);
}
function setupAsyncLocks(config, futureCache, arg) {
  var finishLock = new Lock();
  updateFunctionCache(futureCache, config, arg, finishLock);
  return finishLock;
}
function updateFunctionCache(cache, config, arg, value) {
  if (!config.configured()) config.forever();
  var cachedValue = cache.get(arg);
  config.deactivate();
  switch (config.mode()) {
    case "forever":
      cachedValue = [{
        value: value,
        valid: genTrue
      }];
      cache.set(arg, cachedValue);
      break;
    case "invalidate":
      cachedValue = [{
        value: value,
        valid: config.validator()
      }];
      cache.set(arg, cachedValue);
      break;
    case "valid":
      if (cachedValue) {
        cachedValue.push({
          value: value,
          valid: config.validator()
        });
      } else {
        cachedValue = [{
          value: value,
          valid: config.validator()
        }];
        cache.set(arg, cachedValue);
      }
  }
}
var CacheConfigurator = /*#__PURE__*/function () {
  function CacheConfigurator(data) {
    _classCallCheck(this, CacheConfigurator);
    this._active = true;
    this._never = false;
    this._forever = false;
    this._invalidate = false;
    this._configured = false;
    this._pairs = [];
    this._data = void 0;
    this._data = data;
  }
  return _createClass(CacheConfigurator, [{
    key: "simple",
    value: function simple() {
      return makeSimpleConfigurator(this);
    }
  }, {
    key: "mode",
    value: function mode() {
      if (this._never) return "never";
      if (this._forever) return "forever";
      if (this._invalidate) return "invalidate";
      return "valid";
    }
  }, {
    key: "forever",
    value: function forever() {
      if (!this._active) {
        throw new Error("Cannot change caching after evaluation has completed.");
      }
      if (this._never) {
        throw new Error("Caching has already been configured with .never()");
      }
      this._forever = true;
      this._configured = true;
    }
  }, {
    key: "never",
    value: function never() {
      if (!this._active) {
        throw new Error("Cannot change caching after evaluation has completed.");
      }
      if (this._forever) {
        throw new Error("Caching has already been configured with .forever()");
      }
      this._never = true;
      this._configured = true;
    }
  }, {
    key: "using",
    value: function using(handler) {
      var _this = this;
      if (!this._active) {
        throw new Error("Cannot change caching after evaluation has completed.");
      }
      if (this._never || this._forever) {
        throw new Error("Caching has already been configured with .never or .forever()");
      }
      this._configured = true;
      var key = handler(this._data);
      var fn = (0, _async.maybeAsync)(handler, "You appear to be using an async cache handler, but Babel has been called synchronously");
      if ((0, _async.isThenable)(key)) {
        return key.then(function (key) {
          _this._pairs.push([key, fn]);
          return key;
        });
      }
      this._pairs.push([key, fn]);
      return key;
    }
  }, {
    key: "invalidate",
    value: function invalidate(handler) {
      this._invalidate = true;
      return this.using(handler);
    }
  }, {
    key: "validator",
    value: function validator() {
      var pairs = this._pairs;
      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {
        var _iterator2, _step2, _step2$value, key, fn;
        return _regeneratorRuntime().wrap(function _callee$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _iterator2 = _createForOfIteratorHelper(pairs);
              _context5.prev = 1;
              _iterator2.s();
            case 3:
              if ((_step2 = _iterator2.n()).done) {
                _context5.next = 12;
                break;
              }
              _step2$value = _slicedToArray(_step2.value, 2), key = _step2$value[0], fn = _step2$value[1];
              _context5.t0 = key;
              return _context5.delegateYield(fn(data), "t1", 7);
            case 7:
              _context5.t2 = _context5.t1;
              if (!(_context5.t0 !== _context5.t2)) {
                _context5.next = 10;
                break;
              }
              return _context5.abrupt("return", false);
            case 10:
              _context5.next = 3;
              break;
            case 12:
              _context5.next = 17;
              break;
            case 14:
              _context5.prev = 14;
              _context5.t3 = _context5["catch"](1);
              _iterator2.e(_context5.t3);
            case 17:
              _context5.prev = 17;
              _iterator2.f();
              return _context5.finish(17);
            case 20:
              return _context5.abrupt("return", true);
            case 21:
            case "end":
              return _context5.stop();
          }
        }, _callee, null, [[1, 14, 17, 20]]);
      });
    }
  }, {
    key: "deactivate",
    value: function deactivate() {
      this._active = false;
    }
  }, {
    key: "configured",
    value: function configured() {
      return this._configured;
    }
  }]);
}();
function makeSimpleConfigurator(cache) {
  function cacheFn(val) {
    if (typeof val === "boolean") {
      if (val) cache.forever();else cache.never();
      return;
    }
    return cache.using(function () {
      return assertSimpleType(val());
    });
  }
  cacheFn.forever = function () {
    return cache.forever();
  };
  cacheFn.never = function () {
    return cache.never();
  };
  cacheFn.using = function (cb) {
    return cache.using(function () {
      return assertSimpleType(cb());
    });
  };
  cacheFn.invalidate = function (cb) {
    return cache.invalidate(function () {
      return assertSimpleType(cb());
    });
  };
  return cacheFn;
}
function assertSimpleType(value) {
  if ((0, _async.isThenable)(value)) {
    throw new Error("You appear to be using an async cache handler, " + "which your current version of Babel does not support. " + "We may add support for this in the future, " + "but if you're on the most recent version of @babel/core and still " + "seeing this error, then you'll need to synchronously handle your caching logic.");
  }
  if (value != null && typeof value !== "string" && typeof value !== "boolean" && typeof value !== "number") {
    throw new Error("Cache keys must be either string, boolean, number, null, or undefined.");
  }
  return value;
}
var Lock = /*#__PURE__*/function () {
  function Lock() {
    var _this2 = this;
    _classCallCheck(this, Lock);
    this.released = false;
    this.promise = void 0;
    this._resolve = void 0;
    this.promise = new Promise(function (resolve) {
      _this2._resolve = resolve;
    });
  }
  return _createClass(Lock, [{
    key: "release",
    value: function release(value) {
      this.released = true;
      this._resolve(value);
    }
  }]);
}();
0 && 0;