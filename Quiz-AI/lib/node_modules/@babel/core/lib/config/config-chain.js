"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
var _marked = /*#__PURE__*/_regeneratorRuntime().mark(buildPresetChain),
  _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(buildRootChain),
  _marked3 = /*#__PURE__*/_regeneratorRuntime().mark(loadFileChain),
  _marked4 = /*#__PURE__*/_regeneratorRuntime().mark(mergeExtendsChain);
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildPresetChain = buildPresetChain;
exports.buildPresetChainWalker = void 0;
exports.buildRootChain = buildRootChain;
function _path() {
  var data = require("path");
  _path = function _path() {
    return data;
  };
  return data;
}
function _debug() {
  var data = require("debug");
  _debug = function _debug() {
    return data;
  };
  return data;
}
var _options = require("./validation/options.js");
var _patternToRegex = require("./pattern-to-regex.js");
var _printer = require("./printer.js");
var _rewriteStackTrace = require("../errors/rewrite-stack-trace.js");
var _configError = require("../errors/config-error.js");
var _index = require("./files/index.js");
var _caching = require("./caching.js");
var _configDescriptors = require("./config-descriptors.js");
var debug = _debug()("babel:config:config-chain");
function buildPresetChain(arg, context) {
  var chain;
  return _regeneratorRuntime().wrap(function buildPresetChain$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        return _context.delegateYield(buildPresetChainWalker(arg, context), "t0", 1);
      case 1:
        chain = _context.t0;
        if (chain) {
          _context.next = 4;
          break;
        }
        return _context.abrupt("return", null);
      case 4:
        return _context.abrupt("return", {
          plugins: dedupDescriptors(chain.plugins),
          presets: dedupDescriptors(chain.presets),
          options: chain.options.map(function (o) {
            return normalizeOptions(o);
          }),
          files: new Set()
        });
      case 5:
      case "end":
        return _context.stop();
    }
  }, _marked);
}
var buildPresetChainWalker = exports.buildPresetChainWalker = makeChainWalker({
  root: function root(preset) {
    return loadPresetDescriptors(preset);
  },
  env: function env(preset, envName) {
    return loadPresetEnvDescriptors(preset)(envName);
  },
  overrides: function overrides(preset, index) {
    return loadPresetOverridesDescriptors(preset)(index);
  },
  overridesEnv: function overridesEnv(preset, index, envName) {
    return loadPresetOverridesEnvDescriptors(preset)(index)(envName);
  },
  createLogger: function createLogger() {
    return function () {};
  }
});
var loadPresetDescriptors = (0, _caching.makeWeakCacheSync)(function (preset) {
  return buildRootDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors);
});
var loadPresetEnvDescriptors = (0, _caching.makeWeakCacheSync)(function (preset) {
  return (0, _caching.makeStrongCacheSync)(function (envName) {
    return buildEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, envName);
  });
});
var loadPresetOverridesDescriptors = (0, _caching.makeWeakCacheSync)(function (preset) {
  return (0, _caching.makeStrongCacheSync)(function (index) {
    return buildOverrideDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index);
  });
});
var loadPresetOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)(function (preset) {
  return (0, _caching.makeStrongCacheSync)(function (index) {
    return (0, _caching.makeStrongCacheSync)(function (envName) {
      return buildOverrideEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index, envName);
    });
  });
});
function buildRootChain(opts, context) {
  var configReport, babelRcReport, programmaticLogger, programmaticChain, programmaticReport, configFile, babelrc, babelrcRoots, babelrcRootsDirectory, configFileChain, configFileLogger, validatedFile, result, ignoreFile, babelrcFile, isIgnored, fileChain, pkgData, _yield, _validatedFile, babelrcLogger, _result, chain;
  return _regeneratorRuntime().wrap(function buildRootChain$(_context2) {
    while (1) switch (_context2.prev = _context2.next) {
      case 0:
        programmaticLogger = new _printer.ConfigPrinter();
        return _context2.delegateYield(loadProgrammaticChain({
          options: opts,
          dirname: context.cwd
        }, context, undefined, programmaticLogger), "t0", 2);
      case 2:
        programmaticChain = _context2.t0;
        if (programmaticChain) {
          _context2.next = 5;
          break;
        }
        return _context2.abrupt("return", null);
      case 5:
        return _context2.delegateYield(programmaticLogger.output(), "t1", 6);
      case 6:
        programmaticReport = _context2.t1;
        if (!(typeof opts.configFile === "string")) {
          _context2.next = 12;
          break;
        }
        return _context2.delegateYield((0, _index.loadConfig)(opts.configFile, context.cwd, context.envName, context.caller), "t2", 9);
      case 9:
        configFile = _context2.t2;
        _context2.next = 15;
        break;
      case 12:
        if (!(opts.configFile !== false)) {
          _context2.next = 15;
          break;
        }
        return _context2.delegateYield((0, _index.findRootConfig)(context.root, context.envName, context.caller), "t3", 14);
      case 14:
        configFile = _context2.t3;
      case 15:
        babelrc = opts.babelrc, babelrcRoots = opts.babelrcRoots;
        babelrcRootsDirectory = context.cwd;
        configFileChain = emptyChain();
        configFileLogger = new _printer.ConfigPrinter();
        if (!configFile) {
          _context2.next = 30;
          break;
        }
        validatedFile = validateConfigFile(configFile);
        return _context2.delegateYield(loadFileChain(validatedFile, context, undefined, configFileLogger), "t4", 22);
      case 22:
        result = _context2.t4;
        if (result) {
          _context2.next = 25;
          break;
        }
        return _context2.abrupt("return", null);
      case 25:
        return _context2.delegateYield(configFileLogger.output(), "t5", 26);
      case 26:
        configReport = _context2.t5;
        if (babelrc === undefined) {
          babelrc = validatedFile.options.babelrc;
        }
        if (babelrcRoots === undefined) {
          babelrcRootsDirectory = validatedFile.dirname;
          babelrcRoots = validatedFile.options.babelrcRoots;
        }
        mergeChain(configFileChain, result);
      case 30:
        isIgnored = false;
        fileChain = emptyChain();
        if (!((babelrc === true || babelrc === undefined) && typeof context.filename === "string")) {
          _context2.next = 55;
          break;
        }
        return _context2.delegateYield((0, _index.findPackageData)(context.filename), "t6", 34);
      case 34:
        pkgData = _context2.t6;
        if (!(pkgData && babelrcLoadEnabled(context, pkgData, babelrcRoots, babelrcRootsDirectory))) {
          _context2.next = 55;
          break;
        }
        return _context2.delegateYield((0, _index.findRelativeConfig)(pkgData, context.envName, context.caller), "t7", 37);
      case 37:
        _yield = _context2.t7;
        ignoreFile = _yield.ignore;
        babelrcFile = _yield.config;
        if (ignoreFile) {
          fileChain.files.add(ignoreFile.filepath);
        }
        if (ignoreFile && shouldIgnore(context, ignoreFile.ignore, null, ignoreFile.dirname)) {
          isIgnored = true;
        }
        if (!(babelrcFile && !isIgnored)) {
          _context2.next = 54;
          break;
        }
        _validatedFile = validateBabelrcFile(babelrcFile);
        babelrcLogger = new _printer.ConfigPrinter();
        return _context2.delegateYield(loadFileChain(_validatedFile, context, undefined, babelrcLogger), "t8", 46);
      case 46:
        _result = _context2.t8;
        if (_result) {
          _context2.next = 51;
          break;
        }
        isIgnored = true;
        _context2.next = 54;
        break;
      case 51:
        return _context2.delegateYield(babelrcLogger.output(), "t9", 52);
      case 52:
        babelRcReport = _context2.t9;
        mergeChain(fileChain, _result);
      case 54:
        if (babelrcFile && isIgnored) {
          fileChain.files.add(babelrcFile.filepath);
        }
      case 55:
        if (context.showConfig) {
          console.log("Babel configs on \"".concat(context.filename, "\" (ascending priority):\n") + [configReport, babelRcReport, programmaticReport].filter(function (x) {
            return !!x;
          }).join("\n\n") + "\n-----End Babel configs-----");
        }
        chain = mergeChain(mergeChain(mergeChain(emptyChain(), configFileChain), fileChain), programmaticChain);
        return _context2.abrupt("return", {
          plugins: isIgnored ? [] : dedupDescriptors(chain.plugins),
          presets: isIgnored ? [] : dedupDescriptors(chain.presets),
          options: isIgnored ? [] : chain.options.map(function (o) {
            return normalizeOptions(o);
          }),
          fileHandling: isIgnored ? "ignored" : "transpile",
          ignore: ignoreFile || undefined,
          babelrc: babelrcFile || undefined,
          config: configFile || undefined,
          files: chain.files
        });
      case 58:
      case "end":
        return _context2.stop();
    }
  }, _marked2);
}
function babelrcLoadEnabled(context, pkgData, babelrcRoots, babelrcRootsDirectory) {
  if (typeof babelrcRoots === "boolean") return babelrcRoots;
  var absoluteRoot = context.root;
  if (babelrcRoots === undefined) {
    return pkgData.directories.indexOf(absoluteRoot) !== -1;
  }
  var babelrcPatterns = babelrcRoots;
  if (!Array.isArray(babelrcPatterns)) {
    babelrcPatterns = [babelrcPatterns];
  }
  babelrcPatterns = babelrcPatterns.map(function (pat) {
    return typeof pat === "string" ? _path().resolve(babelrcRootsDirectory, pat) : pat;
  });
  if (babelrcPatterns.length === 1 && babelrcPatterns[0] === absoluteRoot) {
    return pkgData.directories.indexOf(absoluteRoot) !== -1;
  }
  return babelrcPatterns.some(function (pat) {
    if (typeof pat === "string") {
      pat = (0, _patternToRegex["default"])(pat, babelrcRootsDirectory);
    }
    return pkgData.directories.some(function (directory) {
      return matchPattern(pat, babelrcRootsDirectory, directory, context);
    });
  });
}
var validateConfigFile = (0, _caching.makeWeakCacheSync)(function (file) {
  return {
    filepath: file.filepath,
    dirname: file.dirname,
    options: (0, _options.validate)("configfile", file.options, file.filepath)
  };
});
var validateBabelrcFile = (0, _caching.makeWeakCacheSync)(function (file) {
  return {
    filepath: file.filepath,
    dirname: file.dirname,
    options: (0, _options.validate)("babelrcfile", file.options, file.filepath)
  };
});
var validateExtendFile = (0, _caching.makeWeakCacheSync)(function (file) {
  return {
    filepath: file.filepath,
    dirname: file.dirname,
    options: (0, _options.validate)("extendsfile", file.options, file.filepath)
  };
});
var loadProgrammaticChain = makeChainWalker({
  root: function root(input) {
    return buildRootDescriptors(input, "base", _configDescriptors.createCachedDescriptors);
  },
  env: function env(input, envName) {
    return buildEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, envName);
  },
  overrides: function overrides(input, index) {
    return buildOverrideDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index);
  },
  overridesEnv: function overridesEnv(input, index, envName) {
    return buildOverrideEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index, envName);
  },
  createLogger: function createLogger(input, context, baseLogger) {
    return buildProgrammaticLogger(input, context, baseLogger);
  }
});
var loadFileChainWalker = makeChainWalker({
  root: function root(file) {
    return loadFileDescriptors(file);
  },
  env: function env(file, envName) {
    return loadFileEnvDescriptors(file)(envName);
  },
  overrides: function overrides(file, index) {
    return loadFileOverridesDescriptors(file)(index);
  },
  overridesEnv: function overridesEnv(file, index, envName) {
    return loadFileOverridesEnvDescriptors(file)(index)(envName);
  },
  createLogger: function createLogger(file, context, baseLogger) {
    return buildFileLogger(file.filepath, context, baseLogger);
  }
});
function loadFileChain(input, context, files, baseLogger) {
  var chain;
  return _regeneratorRuntime().wrap(function loadFileChain$(_context3) {
    while (1) switch (_context3.prev = _context3.next) {
      case 0:
        return _context3.delegateYield(loadFileChainWalker(input, context, files, baseLogger), "t0", 1);
      case 1:
        chain = _context3.t0;
        chain == null || chain.files.add(input.filepath);
        return _context3.abrupt("return", chain);
      case 4:
      case "end":
        return _context3.stop();
    }
  }, _marked3);
}
var loadFileDescriptors = (0, _caching.makeWeakCacheSync)(function (file) {
  return buildRootDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors);
});
var loadFileEnvDescriptors = (0, _caching.makeWeakCacheSync)(function (file) {
  return (0, _caching.makeStrongCacheSync)(function (envName) {
    return buildEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, envName);
  });
});
var loadFileOverridesDescriptors = (0, _caching.makeWeakCacheSync)(function (file) {
  return (0, _caching.makeStrongCacheSync)(function (index) {
    return buildOverrideDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index);
  });
});
var loadFileOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)(function (file) {
  return (0, _caching.makeStrongCacheSync)(function (index) {
    return (0, _caching.makeStrongCacheSync)(function (envName) {
      return buildOverrideEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index, envName);
    });
  });
});
function buildFileLogger(filepath, context, baseLogger) {
  if (!baseLogger) {
    return function () {};
  }
  return baseLogger.configure(context.showConfig, _printer.ChainFormatter.Config, {
    filepath: filepath
  });
}
function buildRootDescriptors(_ref, alias, descriptors) {
  var dirname = _ref.dirname,
    options = _ref.options;
  return descriptors(dirname, options, alias);
}
function buildProgrammaticLogger(_, context, baseLogger) {
  var _context$caller;
  if (!baseLogger) {
    return function () {};
  }
  return baseLogger.configure(context.showConfig, _printer.ChainFormatter.Programmatic, {
    callerName: (_context$caller = context.caller) == null ? void 0 : _context$caller.name
  });
}
function buildEnvDescriptors(_ref2, alias, descriptors, envName) {
  var dirname = _ref2.dirname,
    options = _ref2.options;
  var _options$env;
  var opts = (_options$env = options.env) == null ? void 0 : _options$env[envName];
  return opts ? descriptors(dirname, opts, "".concat(alias, ".env[\"").concat(envName, "\"]")) : null;
}
function buildOverrideDescriptors(_ref3, alias, descriptors, index) {
  var dirname = _ref3.dirname,
    options = _ref3.options;
  var _options$overrides;
  var opts = (_options$overrides = options.overrides) == null ? void 0 : _options$overrides[index];
  if (!opts) throw new Error("Assertion failure - missing override");
  return descriptors(dirname, opts, "".concat(alias, ".overrides[").concat(index, "]"));
}
function buildOverrideEnvDescriptors(_ref4, alias, descriptors, index, envName) {
  var dirname = _ref4.dirname,
    options = _ref4.options;
  var _options$overrides2, _override$env;
  var override = (_options$overrides2 = options.overrides) == null ? void 0 : _options$overrides2[index];
  if (!override) throw new Error("Assertion failure - missing override");
  var opts = (_override$env = override.env) == null ? void 0 : _override$env[envName];
  return opts ? descriptors(dirname, opts, "".concat(alias, ".overrides[").concat(index, "].env[\"").concat(envName, "\"]")) : null;
}
function makeChainWalker(_ref5) {
  var root = _ref5.root,
    env = _ref5.env,
    overrides = _ref5.overrides,
    overridesEnv = _ref5.overridesEnv,
    createLogger = _ref5.createLogger;
  return function chainWalker(input, context) {
    var files = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();
    var baseLogger = arguments.length > 3 ? arguments[3] : undefined;
    return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var dirname, flattenedConfigs, rootOpts, envOpts, chain, logger, _i, _flattenedConfigs, _flattenedConfigs$_i, config, index, envName;
      return _regeneratorRuntime().wrap(function _callee$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            dirname = input.dirname;
            flattenedConfigs = [];
            rootOpts = root(input);
            if (configIsApplicable(rootOpts, dirname, context, input.filepath)) {
              flattenedConfigs.push({
                config: rootOpts,
                envName: undefined,
                index: undefined
              });
              envOpts = env(input, context.envName);
              if (envOpts && configIsApplicable(envOpts, dirname, context, input.filepath)) {
                flattenedConfigs.push({
                  config: envOpts,
                  envName: context.envName,
                  index: undefined
                });
              }
              (rootOpts.options.overrides || []).forEach(function (_, index) {
                var overrideOps = overrides(input, index);
                if (configIsApplicable(overrideOps, dirname, context, input.filepath)) {
                  flattenedConfigs.push({
                    config: overrideOps,
                    index: index,
                    envName: undefined
                  });
                  var overrideEnvOpts = overridesEnv(input, index, context.envName);
                  if (overrideEnvOpts && configIsApplicable(overrideEnvOpts, dirname, context, input.filepath)) {
                    flattenedConfigs.push({
                      config: overrideEnvOpts,
                      index: index,
                      envName: context.envName
                    });
                  }
                }
              });
            }
            if (!flattenedConfigs.some(function (_ref6) {
              var _ref6$config$options = _ref6.config.options,
                ignore = _ref6$config$options.ignore,
                only = _ref6$config$options.only;
              return shouldIgnore(context, ignore, only, dirname);
            })) {
              _context4.next = 6;
              break;
            }
            return _context4.abrupt("return", null);
          case 6:
            chain = emptyChain();
            logger = createLogger(input, context, baseLogger);
            _i = 0, _flattenedConfigs = flattenedConfigs;
          case 9:
            if (!(_i < _flattenedConfigs.length)) {
              _context4.next = 19;
              break;
            }
            _flattenedConfigs$_i = _flattenedConfigs[_i], config = _flattenedConfigs$_i.config, index = _flattenedConfigs$_i.index, envName = _flattenedConfigs$_i.envName;
            return _context4.delegateYield(mergeExtendsChain(chain, config.options, dirname, context, files, baseLogger), "t0", 12);
          case 12:
            if (_context4.t0) {
              _context4.next = 14;
              break;
            }
            return _context4.abrupt("return", null);
          case 14:
            logger(config, index, envName);
            return _context4.delegateYield(mergeChainOpts(chain, config), "t1", 16);
          case 16:
            _i++;
            _context4.next = 9;
            break;
          case 19:
            return _context4.abrupt("return", chain);
          case 20:
          case "end":
            return _context4.stop();
        }
      }, _callee);
    })();
  };
}
function mergeExtendsChain(chain, opts, dirname, context, files, baseLogger) {
  var file, fileChain;
  return _regeneratorRuntime().wrap(function mergeExtendsChain$(_context5) {
    while (1) switch (_context5.prev = _context5.next) {
      case 0:
        if (!(opts["extends"] === undefined)) {
          _context5.next = 2;
          break;
        }
        return _context5.abrupt("return", true);
      case 2:
        return _context5.delegateYield((0, _index.loadConfig)(opts["extends"], dirname, context.envName, context.caller), "t0", 3);
      case 3:
        file = _context5.t0;
        if (!files.has(file)) {
          _context5.next = 6;
          break;
        }
        throw new Error("Configuration cycle detected loading ".concat(file.filepath, ".\n") + "File already loaded following the config chain:\n" + Array.from(files, function (file) {
          return " - ".concat(file.filepath);
        }).join("\n"));
      case 6:
        files.add(file);
        return _context5.delegateYield(loadFileChain(validateExtendFile(file), context, files, baseLogger), "t1", 8);
      case 8:
        fileChain = _context5.t1;
        files["delete"](file);
        if (fileChain) {
          _context5.next = 12;
          break;
        }
        return _context5.abrupt("return", false);
      case 12:
        mergeChain(chain, fileChain);
        return _context5.abrupt("return", true);
      case 14:
      case "end":
        return _context5.stop();
    }
  }, _marked4);
}
function mergeChain(target, source) {
  var _target$options, _target$plugins, _target$presets;
  (_target$options = target.options).push.apply(_target$options, _toConsumableArray(source.options));
  (_target$plugins = target.plugins).push.apply(_target$plugins, _toConsumableArray(source.plugins));
  (_target$presets = target.presets).push.apply(_target$presets, _toConsumableArray(source.presets));
  var _iterator = _createForOfIteratorHelper(source.files),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var file = _step.value;
      target.files.add(file);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return target;
}
function mergeChainOpts(target, _ref7) {
  var options = _ref7.options,
    plugins = _ref7.plugins,
    presets = _ref7.presets;
  return /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_target$plugins2, _target$presets2) {
    return _regeneratorRuntime().wrap(function _callee2$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          target.options.push(options);
          _context6.t0 = (_target$plugins2 = target.plugins).push;
          _context6.t1 = _target$plugins2;
          _context6.t2 = _toConsumableArray;
          return _context6.delegateYield(plugins(), "t3", 5);
        case 5:
          _context6.t4 = _context6.t3;
          _context6.t5 = (0, _context6.t2)(_context6.t4);
          _context6.t0.apply.call(_context6.t0, _context6.t1, _context6.t5);
          _context6.t6 = (_target$presets2 = target.presets).push;
          _context6.t7 = _target$presets2;
          _context6.t8 = _toConsumableArray;
          return _context6.delegateYield(presets(), "t9", 12);
        case 12:
          _context6.t10 = _context6.t9;
          _context6.t11 = (0, _context6.t8)(_context6.t10);
          _context6.t6.apply.call(_context6.t6, _context6.t7, _context6.t11);
          return _context6.abrupt("return", target);
        case 16:
        case "end":
          return _context6.stop();
      }
    }, _callee2);
  })();
}
function emptyChain() {
  return {
    options: [],
    presets: [],
    plugins: [],
    files: new Set()
  };
}
function normalizeOptions(opts) {
  var options = Object.assign({}, opts);
  delete options["extends"];
  delete options.env;
  delete options.overrides;
  delete options.plugins;
  delete options.presets;
  delete options.passPerPreset;
  delete options.ignore;
  delete options.only;
  delete options.test;
  delete options.include;
  delete options.exclude;
  if (hasOwnProperty.call(options, "sourceMap")) {
    options.sourceMaps = options.sourceMap;
    delete options.sourceMap;
  }
  return options;
}
function dedupDescriptors(items) {
  var map = new Map();
  var descriptors = [];
  var _iterator2 = _createForOfIteratorHelper(items),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var item = _step2.value;
      if (typeof item.value === "function") {
        var fnKey = item.value;
        var nameMap = map.get(fnKey);
        if (!nameMap) {
          nameMap = new Map();
          map.set(fnKey, nameMap);
        }
        var desc = nameMap.get(item.name);
        if (!desc) {
          desc = {
            value: item
          };
          descriptors.push(desc);
          if (!item.ownPass) nameMap.set(item.name, desc);
        } else {
          desc.value = item;
        }
      } else {
        descriptors.push({
          value: item
        });
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return descriptors.reduce(function (acc, desc) {
    acc.push(desc.value);
    return acc;
  }, []);
}
function configIsApplicable(_ref8, dirname, context, configName) {
  var options = _ref8.options;
  return (options.test === undefined || configFieldIsApplicable(context, options.test, dirname, configName)) && (options.include === undefined || configFieldIsApplicable(context, options.include, dirname, configName)) && (options.exclude === undefined || !configFieldIsApplicable(context, options.exclude, dirname, configName));
}
function configFieldIsApplicable(context, test, dirname, configName) {
  var patterns = Array.isArray(test) ? test : [test];
  return matchesPatterns(context, patterns, dirname, configName);
}
function ignoreListReplacer(_key, value) {
  if (value instanceof RegExp) {
    return String(value);
  }
  return value;
}
function shouldIgnore(context, ignore, only, dirname) {
  if (ignore && matchesPatterns(context, ignore, dirname)) {
    var _context$filename;
    var message = "No config is applied to \"".concat((_context$filename = context.filename) != null ? _context$filename : "(unknown)", "\" because it matches one of `ignore: ").concat(JSON.stringify(ignore, ignoreListReplacer), "` from \"").concat(dirname, "\"");
    debug(message);
    if (context.showConfig) {
      console.log(message);
    }
    return true;
  }
  if (only && !matchesPatterns(context, only, dirname)) {
    var _context$filename2;
    var _message = "No config is applied to \"".concat((_context$filename2 = context.filename) != null ? _context$filename2 : "(unknown)", "\" because it fails to match one of `only: ").concat(JSON.stringify(only, ignoreListReplacer), "` from \"").concat(dirname, "\"");
    debug(_message);
    if (context.showConfig) {
      console.log(_message);
    }
    return true;
  }
  return false;
}
function matchesPatterns(context, patterns, dirname, configName) {
  return patterns.some(function (pattern) {
    return matchPattern(pattern, dirname, context.filename, context, configName);
  });
}
function matchPattern(pattern, dirname, pathToTest, context, configName) {
  if (typeof pattern === "function") {
    return !!(0, _rewriteStackTrace.endHiddenCallStack)(pattern)(pathToTest, {
      dirname: dirname,
      envName: context.envName,
      caller: context.caller
    });
  }
  if (typeof pathToTest !== "string") {
    throw new _configError["default"]("Configuration contains string/RegExp pattern, but no filename was passed to Babel", configName);
  }
  if (typeof pattern === "string") {
    pattern = (0, _patternToRegex["default"])(pattern, dirname);
  }
  return pattern.test(pathToTest);
}
0 && 0;