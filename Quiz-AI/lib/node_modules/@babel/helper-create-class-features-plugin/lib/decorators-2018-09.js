"use strict";

var _templateObject, _templateObject2, _templateObject3, _templateObject4;
function _taggedTemplateLiteral(e, t) { return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } })); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildDecoratedClass = buildDecoratedClass;
exports.hasDecorators = hasDecorators;
exports.hasOwnDecorators = hasOwnDecorators;
var _core = require("@babel/core");
var _helperReplaceSupers = require("@babel/helper-replace-supers");
var _helperFunctionName = require("@babel/helper-function-name");
function hasOwnDecorators(node) {
  var _node$decorators;
  return !!((_node$decorators = node.decorators) != null && _node$decorators.length);
}
function hasDecorators(node) {
  return hasOwnDecorators(node) || node.body.body.some(hasOwnDecorators);
}
function prop(key, value) {
  if (!value) return null;
  return _core.types.objectProperty(_core.types.identifier(key), value);
}
function method(key, body) {
  return _core.types.objectMethod("method", _core.types.identifier(key), [], _core.types.blockStatement(body));
}
function takeDecorators(node) {
  var result;
  if (node.decorators && node.decorators.length > 0) {
    result = _core.types.arrayExpression(node.decorators.map(function (decorator) {
      return decorator.expression;
    }));
  }
  node.decorators = undefined;
  return result;
}
function getKey(node) {
  if (node.computed) {
    return node.key;
  } else if (_core.types.isIdentifier(node.key)) {
    return _core.types.stringLiteral(node.key.name);
  } else {
    return _core.types.stringLiteral(String(node.key.value));
  }
}
function extractElementDescriptor(file, classRef, superRef, path) {
  var isMethod = path.isClassMethod();
  if (path.isPrivate()) {
    throw path.buildCodeFrameError("Private ".concat(isMethod ? "methods" : "fields", " in decorated classes are not supported yet."));
  }
  if (path.node.type === "ClassAccessorProperty") {
    throw path.buildCodeFrameError("Accessor properties are not supported in 2018-09 decorator transform, please specify { \"version\": \"2021-12\" } instead.");
  }
  if (path.node.type === "StaticBlock") {
    throw path.buildCodeFrameError("Static blocks are not supported in 2018-09 decorator transform, please specify { \"version\": \"2021-12\" } instead.");
  }
  var node = path.node,
    scope = path.scope;
  if (!path.isTSDeclareMethod()) {
    new _helperReplaceSupers["default"]({
      methodPath: path,
      objectRef: classRef,
      superRef: superRef,
      file: file,
      refToPreserve: classRef
    }).replace();
  }
  var properties = [prop("kind", _core.types.stringLiteral(_core.types.isClassMethod(node) ? node.kind : "field")), prop("decorators", takeDecorators(node)), prop("static", node["static"] && _core.types.booleanLiteral(true)), prop("key", getKey(node))].filter(Boolean);
  if (_core.types.isClassMethod(node)) {
    var id = node.computed ? null : node.key;
    var transformed = _core.types.toExpression(node);
    properties.push(prop("value", (0, _helperFunctionName["default"])({
      node: transformed,
      id: id,
      scope: scope
    }) || transformed));
  } else if (_core.types.isClassProperty(node) && node.value) {
    properties.push(method("value", _core.template.statements.ast(_templateObject || (_templateObject = _taggedTemplateLiteral(["return ", ""])), node.value)));
  } else {
    properties.push(prop("value", scope.buildUndefinedNode()));
  }
  path.remove();
  return _core.types.objectExpression(properties);
}
function addDecorateHelper(file) {
  return file.addHelper("decorate");
}
function buildDecoratedClass(ref, path, elements, file) {
  var node = path.node,
    scope = path.scope;
  var initializeId = scope.generateUidIdentifier("initialize");
  var isDeclaration = node.id && path.isDeclaration();
  var isStrict = path.isInStrictMode();
  var superClass = node.superClass;
  node.type = "ClassDeclaration";
  if (!node.id) node.id = _core.types.cloneNode(ref);
  var superId;
  if (superClass) {
    superId = scope.generateUidIdentifierBasedOnNode(node.superClass, "super");
    node.superClass = superId;
  }
  var classDecorators = takeDecorators(node);
  var definitions = _core.types.arrayExpression(elements.filter(function (element) {
    return !element.node["abstract"] && element.node.type !== "TSIndexSignature";
  }).map(function (path) {
    return extractElementDescriptor(file, node.id, superId, path);
  }));
  var wrapperCall = _core.template.expression.ast(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    ", "(\n      ", ",\n      function (", ", ", ") {\n        ", "\n        return { F: ", ", d: ", " };\n      },\n      ", "\n    )\n  "])), addDecorateHelper(file), classDecorators || _core.types.nullLiteral(), initializeId, superClass ? _core.types.cloneNode(superId) : null, node, _core.types.cloneNode(node.id), definitions, superClass);
  if (!isStrict) {
    wrapperCall.arguments[1].body.directives.push(_core.types.directive(_core.types.directiveLiteral("use strict")));
  }
  var replacement = wrapperCall;
  var classPathDesc = "arguments.1.body.body.0";
  if (isDeclaration) {
    replacement = _core.template.statement.ast(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["let ", " = ", ""])), ref, wrapperCall);
    classPathDesc = "declarations.0.init." + classPathDesc;
  }
  return {
    instanceNodes: [_core.template.statement.ast(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n        ", "(this)\n      "])), _core.types.cloneNode(initializeId))],
    wrapClass: function wrapClass(path) {
      path.replaceWith(replacement);
      return path.get(classPathDesc);
    }
  };
}