"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = generateHelpers;
var _fs = _interopRequireDefault(require("fs"));
var _path = require("path");
var _url = require("url");
var _terser = require("terser");
var _babelTopLevel = require("$repo-utils/babel-top-level");
var _$repoUtils = require("$repo-utils");
var _zlib = require("zlib");
var _buildHelperMetadata = require("./build-helper-metadata.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _wrapRegExp() { _wrapRegExp = function _wrapRegExp(e, r) { return new BabelRegExp(e, void 0, r); }; var e = RegExp.prototype, r = new WeakMap(); function BabelRegExp(e, t, p) { var o = RegExp(e, t); return r.set(o, p || r.get(e)), _setPrototypeOf(o, BabelRegExp.prototype); } function buildGroups(e, t) { var p = r.get(t); return Object.keys(p).reduce(function (r, t) { var o = p[t]; if ("number" == typeof o) r[t] = e[o];else { for (var i = 0; void 0 === e[o[i]] && i + 1 < o.length;) i++; r[t] = e[o[i]]; } return r; }, Object.create(null)); } return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (r) { var t = e.exec.call(this, r); if (t) { t.groups = buildGroups(t, this); var p = t.indices; p && (p.groups = buildGroups(p, this)); } return t; }, BabelRegExp.prototype[Symbol.replace] = function (t, p) { if ("string" == typeof p) { var o = r.get(this); return e[Symbol.replace].call(this, t, p.replace(/\$<([^>]+)>/g, function (e, r) { var t = o[r]; return "$" + (Array.isArray(t) ? t.join("$") : t); })); } if ("function" == typeof p) { var i = this; return e[Symbol.replace].call(this, t, function () { var e = arguments; return "object" != _typeof(e[e.length - 1]) && (e = [].slice.call(e)).push(buildGroups(e, i)), p.apply(this, e); }); } return e[Symbol.replace].call(this, t, p); }, _wrapRegExp.apply(this, arguments); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; } /* eslint-disable import/no-extraneous-dependencies */
var HELPERS_FOLDER = new _url.URL("../src/helpers", import.meta.url);
var IGNORED_FILES = new Set(["package.json", "tsconfig.json"]);
function generateHelpers() {
  return _generateHelpers.apply(this, arguments);
}
function _generateHelpers() {
  _generateHelpers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var output, babel7extraOutput, _iterator, _step, _loop, _ret;
    return _regeneratorRuntime().wrap(function _callee$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          output = "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'yarn gulp generate-runtime-helpers'\n */\n\nimport template from \"@babel/template\";\nimport type * as t from \"@babel/types\";\n\ninterface Helper {\n  minVersion: string;\n  ast: () => t.Program;\n  metadata: HelperMetadata;\n}\n\nexport interface HelperMetadata {\n  globals: string[];\n  locals: { [name: string]: string[] };\n  dependencies: { [name: string]: string[] };\n  exportBindingAssignments: string[];\n  exportName: string;\n}\n\nfunction helper(minVersion: string, source: string, metadata: HelperMetadata): Helper {\n  return Object.freeze({\n    minVersion,\n    ast: () => template.program.ast(source, { preserveComments: true }),\n    metadata,\n  })\n}\n\nexport { helpers as default };\nconst helpers: Record<string, Helper> = {\n  __proto__: null,\n";
          babel7extraOutput = "";
          _context2.t0 = _createForOfIteratorHelper;
          _context2.next = 5;
          return _fs["default"].promises.readdir(HELPERS_FOLDER);
        case 5:
          _context2.t1 = _context2.sent.sort();
          _iterator = (0, _context2.t0)(_context2.t1);
          _context2.prev = 7;
          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {
            var file, _file$split, _file$split2, helperName, isTs, filePath, code, minVersionMatch, minVersion, onlyBabel7, mangleFns, noMangleFns, metadata, _getHelperMetadata, _getHelperMetadata2, helperStr;
            return _regeneratorRuntime().wrap(function _loop$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  file = _step.value;
                  if (!IGNORED_FILES.has(file)) {
                    _context.next = 3;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 3:
                  if (!file.startsWith(".")) {
                    _context.next = 5;
                    break;
                  }
                  return _context.abrupt("return", 0);
                case 5:
                  // ignore e.g. vim swap files
                  _file$split = file.split("."), _file$split2 = _slicedToArray(_file$split, 1), helperName = _file$split2[0];
                  isTs = file.endsWith(".ts");
                  filePath = (0, _path.join)((0, _url.fileURLToPath)(HELPERS_FOLDER), file);
                  if (!(!file.endsWith(".js") && !isTs)) {
                    _context.next = 11;
                    break;
                  }
                  console.error("ignoring", filePath);
                  return _context.abrupt("return", 0);
                case 11:
                  _context.next = 13;
                  return _fs["default"].promises.readFile(filePath, "utf8");
                case 13:
                  code = _context.sent;
                  minVersionMatch = code.match( /*#__PURE__*/_wrapRegExp(/^\s*\/\*\s*@minVersion\s+(\S+)\s*\*\/\s*$/m, {
                    minVersion: 1
                  }));
                  if (minVersionMatch) {
                    _context.next = 17;
                    break;
                  }
                  throw new Error("@minVersion number missing in ".concat(filePath));
                case 17:
                  minVersion = minVersionMatch.groups.minVersion;
                  onlyBabel7 = code.includes("@onlyBabel7");
                  mangleFns = code.includes("@mangleFns");
                  noMangleFns = [];
                  code = _babelTopLevel.babel.transformSync(code, {
                    configFile: false,
                    babelrc: false,
                    filename: filePath,
                    presets: [[_babelTopLevel.presetTypescript, {
                      onlyRemoveTypeImports: true,
                      optimizeConstEnums: true
                    }]],
                    plugins: [
                    /**
                     * @type {import("@babel/core").PluginObj}
                     */
                    {
                      visitor: {
                        ImportDeclaration: function ImportDeclaration(path) {
                          var source = path.node.source;
                          source.value = source.value.replace(/\.ts$/, "").replace(/^\.\//, "");
                        },
                        FunctionDeclaration: function FunctionDeclaration(path) {
                          var _path$node$leadingCom;
                          if (mangleFns && (_path$node$leadingCom = path.node.leadingComments) !== null && _path$node$leadingCom !== void 0 && _path$node$leadingCom.find(function (c) {
                            return c.value.includes("@no-mangle");
                          })) {
                            var name = path.node.id.name;
                            if (name) noMangleFns.push(name);
                          }
                        }
                      }
                    }]
                  }).code;
                  _context.next = 24;
                  return (0, _terser.minify)(code, {
                    ecma: 5,
                    mangle: {
                      keep_fnames: mangleFns ? new RegExp(noMangleFns.join("|")) : true
                    },
                    // The _typeof helper has a custom directive that we must keep
                    compress: {
                      directives: false,
                      passes: 10,
                      unsafe: true,
                      unsafe_proto: true
                    }
                  });
                case 24:
                  code = _context.sent.code;
                  // eslint-disable-next-line prefer-const
                  _getHelperMetadata = (0, _buildHelperMetadata.getHelperMetadata)(_babelTopLevel.babel, code, helperName);
                  _getHelperMetadata2 = _slicedToArray(_getHelperMetadata, 2);
                  code = _getHelperMetadata2[0];
                  metadata = _getHelperMetadata2[1];
                  helperStr = "  // size: ".concat(code.length, ", gzip size: ").concat((0, _zlib.gzipSync)(code).length, "\n  ").concat(JSON.stringify(helperName), ": helper(\n    ").concat(JSON.stringify(minVersion), ",\n    ").concat(JSON.stringify(code), ",\n    ").concat((0, _buildHelperMetadata.stringifyMetadata)(metadata), "\n  ),\n");
                  if (onlyBabel7) {
                    if (!(0, _$repoUtils.IS_BABEL_8)()) babel7extraOutput += helperStr;
                  } else {
                    output += helperStr;
                  }
                case 31:
                case "end":
                  return _context.stop();
              }
            }, _loop);
          });
          _iterator.s();
        case 10:
          if ((_step = _iterator.n()).done) {
            _context2.next = 17;
            break;
          }
          return _context2.delegateYield(_loop(), "t2", 12);
        case 12:
          _ret = _context2.t2;
          if (!(_ret === 0)) {
            _context2.next = 15;
            break;
          }
          return _context2.abrupt("continue", 15);
        case 15:
          _context2.next = 10;
          break;
        case 17:
          _context2.next = 22;
          break;
        case 19:
          _context2.prev = 19;
          _context2.t3 = _context2["catch"](7);
          _iterator.e(_context2.t3);
        case 22:
          _context2.prev = 22;
          _iterator.f();
          return _context2.finish(22);
        case 25:
          output += "};";
          if (babel7extraOutput) {
            output += "\n\nif (!process.env.BABEL_8_BREAKING) {\n  Object.assign(helpers, {\n    ".concat(babel7extraOutput, "\n  });\n}\n");
          }
          return _context2.abrupt("return", output);
        case 28:
        case "end":
          return _context2.stop();
      }
    }, _callee, null, [[7, 19, 22, 25]]);
  }));
  return _generateHelpers.apply(this, arguments);
}