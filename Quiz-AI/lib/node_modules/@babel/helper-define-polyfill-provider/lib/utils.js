"use strict";

var _templateObject, _templateObject2, _templateObject3;
function _taggedTemplateLiteral(e, t) { return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } })); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
exports.__esModule = true;
exports.createUtilsGetter = createUtilsGetter;
exports.getImportSource = getImportSource;
exports.getRequireSource = getRequireSource;
exports.has = has;
exports.intersection = intersection;
exports.resolveKey = resolveKey;
exports.resolveSource = resolveSource;
var _babel = _interopRequireWildcard(require("@babel/core"));
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj["default"] = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
var _ref = _babel["default"] || _babel,
  t = _ref.types,
  template = _ref.template;
function intersection(a, b) {
  var result = new Set();
  a.forEach(function (v) {
    return b.has(v) && result.add(v);
  });
  return result;
}
function has(object, key) {
  return Object.prototype.hasOwnProperty.call(object, key);
}
function getType(target) {
  return Object.prototype.toString.call(target).slice(8, -1);
}
function resolveId(path) {
  if (path.isIdentifier() && !path.scope.hasBinding(path.node.name, /* noGlobals */true)) {
    return path.node.name;
  }
  if (path.isPure()) {
    var _path$evaluate = path.evaluate(),
      deopt = _path$evaluate.deopt;
    if (deopt && deopt.isIdentifier()) {
      return deopt.node.name;
    }
  }
}
function resolveKey(path) {
  var computed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var scope = path.scope;
  if (path.isStringLiteral()) return path.node.value;
  var isIdentifier = path.isIdentifier();
  if (isIdentifier && !(computed || path.parent.computed)) {
    return path.node.name;
  }
  if (computed && path.isMemberExpression() && path.get("object").isIdentifier({
    name: "Symbol"
  }) && !scope.hasBinding("Symbol", /* noGlobals */true)) {
    var sym = resolveKey(path.get("property"), path.node.computed);
    if (sym) return "Symbol." + sym;
  }
  if (isIdentifier ? scope.hasBinding(path.node.name, /* noGlobals */true) : path.isPure()) {
    var _path$evaluate2 = path.evaluate(),
      value = _path$evaluate2.value;
    if (typeof value === "string") return value;
  }
}
function resolveSource(obj) {
  if (obj.isMemberExpression() && obj.get("property").isIdentifier({
    name: "prototype"
  })) {
    var _id = resolveId(obj.get("object"));
    if (_id) {
      return {
        id: _id,
        placement: "prototype"
      };
    }
    return {
      id: null,
      placement: null
    };
  }
  var id = resolveId(obj);
  if (id) {
    return {
      id: id,
      placement: "static"
    };
  }
  if (obj.isRegExpLiteral()) {
    return {
      id: "RegExp",
      placement: "prototype"
    };
  } else if (obj.isFunction()) {
    return {
      id: "Function",
      placement: "prototype"
    };
  } else if (obj.isPure()) {
    var _obj$evaluate = obj.evaluate(),
      value = _obj$evaluate.value;
    if (value !== undefined) {
      return {
        id: getType(value),
        placement: "prototype"
      };
    }
  }
  return {
    id: null,
    placement: null
  };
}
function getImportSource(_ref2) {
  var node = _ref2.node;
  if (node.specifiers.length === 0) return node.source.value;
}
function getRequireSource(_ref3) {
  var node = _ref3.node;
  if (!t.isExpressionStatement(node)) return;
  var expression = node.expression;
  if (t.isCallExpression(expression) && t.isIdentifier(expression.callee) && expression.callee.name === "require" && expression.arguments.length === 1 && t.isStringLiteral(expression.arguments[0])) {
    return expression.arguments[0].value;
  }
}
function hoist(node) {
  // @ts-expect-error
  node._blockHoist = 3;
  return node;
}
function createUtilsGetter(cache) {
  return function (path) {
    var prog = path.findParent(function (p) {
      return p.isProgram();
    });
    return {
      injectGlobalImport: function injectGlobalImport(url, moduleName) {
        cache.storeAnonymous(prog, url, moduleName, function (isScript, source) {
          return isScript ? template.statement.ast(_templateObject || (_templateObject = _taggedTemplateLiteral(["require(", ")"])), source) : t.importDeclaration([], source);
        });
      },
      injectNamedImport: function injectNamedImport(url, name) {
        var hint = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : name;
        var moduleName = arguments.length > 3 ? arguments[3] : undefined;
        return cache.storeNamed(prog, url, name, moduleName, function (isScript, source, name) {
          var id = prog.scope.generateUidIdentifier(hint);
          return {
            node: isScript ? hoist(template.statement.ast(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n                  var ", " = require(", ").", "\n                "])), id, source, name)) : t.importDeclaration([t.importSpecifier(id, name)], source),
            name: id.name
          };
        });
      },
      injectDefaultImport: function injectDefaultImport(url) {
        var hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : url;
        var moduleName = arguments.length > 2 ? arguments[2] : undefined;
        return cache.storeNamed(prog, url, "default", moduleName, function (isScript, source) {
          var id = prog.scope.generateUidIdentifier(hint);
          return {
            node: isScript ? hoist(template.statement.ast(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["var ", " = require(", ")"])), id, source)) : t.importDeclaration([t.importDefaultSpecifier(id)], source),
            name: id.name
          };
        });
      }
    };
  };
}