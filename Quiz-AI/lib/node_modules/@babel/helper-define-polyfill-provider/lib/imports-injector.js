"use strict";

function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
exports.__esModule = true;
exports["default"] = void 0;
var _babel = _interopRequireWildcard(require("@babel/core"));
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj["default"] = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
var _ref = _babel["default"] || _babel,
  t = _ref.types;
var ImportsCachedInjector = /*#__PURE__*/function () {
  function ImportsCachedInjector(resolver, getPreferredIndex) {
    _classCallCheck(this, ImportsCachedInjector);
    this._imports = new WeakMap();
    this._anonymousImports = new WeakMap();
    this._lastImports = new WeakMap();
    this._resolver = resolver;
    this._getPreferredIndex = getPreferredIndex;
  }
  return _createClass(ImportsCachedInjector, [{
    key: "storeAnonymous",
    value: function storeAnonymous(programPath, url, moduleName, getVal) {
      var key = this._normalizeKey(programPath, url);
      var imports = this._ensure(this._anonymousImports, programPath, Set);
      if (imports.has(key)) return;
      var node = getVal(programPath.node.sourceType === "script", t.stringLiteral(this._resolver(url)));
      imports.add(key);
      this._injectImport(programPath, node, moduleName);
    }
  }, {
    key: "storeNamed",
    value: function storeNamed(programPath, url, name, moduleName, getVal) {
      var key = this._normalizeKey(programPath, url, name);
      var imports = this._ensure(this._imports, programPath, Map);
      if (!imports.has(key)) {
        var _getVal = getVal(programPath.node.sourceType === "script", t.stringLiteral(this._resolver(url)), t.identifier(name)),
          node = _getVal.node,
          id = _getVal.name;
        imports.set(key, id);
        this._injectImport(programPath, node, moduleName);
      }
      return t.identifier(imports.get(key));
    }
  }, {
    key: "_injectImport",
    value: function _injectImport(programPath, node, moduleName) {
      var _this$_lastImports$ge;
      var newIndex = this._getPreferredIndex(moduleName);
      var lastImports = (_this$_lastImports$ge = this._lastImports.get(programPath)) != null ? _this$_lastImports$ge : [];
      var isPathStillValid = function isPathStillValid(path) {
        return path.node &&
        // Sometimes the AST is modified and the "last import"
        // we have has been replaced
        path.parent === programPath.node && path.container === programPath.node.body;
      };
      var last;
      if (newIndex === Infinity) {
        // Fast path: we can always just insert at the end if newIndex is `Infinity`
        if (lastImports.length > 0) {
          last = lastImports[lastImports.length - 1].path;
          if (!isPathStillValid(last)) last = undefined;
        }
      } else {
        var _iterator = _createForOfIteratorHelper(lastImports.entries()),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _slicedToArray(_step.value, 2),
              i = _step$value[0],
              data = _step$value[1];
            var path = data.path,
              index = data.index;
            if (isPathStillValid(path)) {
              if (newIndex < index) {
                var _path$insertBefore = path.insertBefore(node),
                  _path$insertBefore2 = _slicedToArray(_path$insertBefore, 1),
                  newPath = _path$insertBefore2[0];
                lastImports.splice(i, 0, {
                  path: newPath,
                  index: newIndex
                });
                return;
              }
              last = path;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      if (last) {
        var _last$insertAfter = last.insertAfter(node),
          _last$insertAfter2 = _slicedToArray(_last$insertAfter, 1),
          _newPath = _last$insertAfter2[0];
        lastImports.push({
          path: _newPath,
          index: newIndex
        });
      } else {
        var _programPath$unshiftC = programPath.unshiftContainer("body", node),
          _programPath$unshiftC2 = _slicedToArray(_programPath$unshiftC, 1),
          _newPath2 = _programPath$unshiftC2[0];
        this._lastImports.set(programPath, [{
          path: _newPath2,
          index: newIndex
        }]);
      }
    }
  }, {
    key: "_ensure",
    value: function _ensure(map, programPath, Collection) {
      var collection = map.get(programPath);
      if (!collection) {
        collection = new Collection();
        map.set(programPath, collection);
      }
      return collection;
    }
  }, {
    key: "_normalizeKey",
    value: function _normalizeKey(programPath, url) {
      var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
      var sourceType = programPath.node.sourceType;

      // If we rely on the imported binding (the "name" parameter), we also need to cache
      // based on the sourceType. This is because the module transforms change the names
      // of the import variables.
      return "".concat(name && sourceType, "::").concat(url, "::").concat(name);
    }
  }]);
}();
exports["default"] = ImportsCachedInjector;