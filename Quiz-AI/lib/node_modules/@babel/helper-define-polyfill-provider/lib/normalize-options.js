"use strict";

function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
exports.__esModule = true;
exports.applyMissingDependenciesDefaults = applyMissingDependenciesDefaults;
exports.validateIncludeExclude = validateIncludeExclude;
var _utils = require("./utils");
function patternToRegExp(pattern) {
  if (pattern instanceof RegExp) return pattern;
  try {
    return new RegExp("^".concat(pattern, "$"));
  } catch (_unused) {
    return null;
  }
}
function buildUnusedError(label, unused) {
  if (!unused.length) return "";
  return "  - The following \"".concat(label, "\" patterns didn't match any polyfill:\n") + unused.map(function (original) {
    return "    ".concat(String(original), "\n");
  }).join("");
}
function buldDuplicatesError(duplicates) {
  if (!duplicates.size) return "";
  return "  - The following polyfills were matched both by \"include\" and \"exclude\" patterns:\n" + Array.from(duplicates, function (name) {
    return "    ".concat(name, "\n");
  }).join("");
}
function validateIncludeExclude(provider, polyfills, includePatterns, excludePatterns) {
  var current;
  var filter = function filter(pattern) {
    var regexp = patternToRegExp(pattern);
    if (!regexp) return false;
    var matched = false;
    var _iterator = _createForOfIteratorHelper(polyfills.keys()),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var polyfill = _step.value;
        if (regexp.test(polyfill)) {
          matched = true;
          current.add(polyfill);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return !matched;
  };

  // prettier-ignore
  var include = current = new Set();
  var unusedInclude = Array.from(includePatterns).filter(filter);

  // prettier-ignore
  var exclude = current = new Set();
  var unusedExclude = Array.from(excludePatterns).filter(filter);
  var duplicates = (0, _utils.intersection)(include, exclude);
  if (duplicates.size > 0 || unusedInclude.length > 0 || unusedExclude.length > 0) {
    throw new Error("Error while validating the \"".concat(provider, "\" provider options:\n") + buildUnusedError("include", unusedInclude) + buildUnusedError("exclude", unusedExclude) + buldDuplicatesError(duplicates));
  }
  return {
    include: include,
    exclude: exclude
  };
}
function applyMissingDependenciesDefaults(options, babelApi) {
  var _options$missingDepen = options.missingDependencies,
    missingDependencies = _options$missingDepen === void 0 ? {} : _options$missingDepen;
  if (missingDependencies === false) return false;
  var caller = babelApi.caller(function (caller) {
    return caller == null ? void 0 : caller.name;
  });
  var _missingDependencies$ = missingDependencies.log,
    log = _missingDependencies$ === void 0 ? "deferred" : _missingDependencies$,
    _missingDependencies$2 = missingDependencies.inject,
    inject = _missingDependencies$2 === void 0 ? caller === "rollup-plugin-babel" ? "throw" : "import" : _missingDependencies$2,
    _missingDependencies$3 = missingDependencies.all,
    all = _missingDependencies$3 === void 0 ? false : _missingDependencies$3;
  return {
    log: log,
    inject: inject,
    all: all
  };
}