"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OptionValidator = void 0;
var _findSuggestion = require("./find-suggestion.js");
var OptionValidator = /*#__PURE__*/function () {
  function OptionValidator(descriptor) {
    _classCallCheck(this, OptionValidator);
    this.descriptor = descriptor;
  }
  return _createClass(OptionValidator, [{
    key: "validateTopLevelOptions",
    value: function validateTopLevelOptions(options, TopLevelOptionShape) {
      var validOptionNames = Object.keys(TopLevelOptionShape);
      for (var _i = 0, _Object$keys = Object.keys(options); _i < _Object$keys.length; _i++) {
        var option = _Object$keys[_i];
        if (!validOptionNames.includes(option)) {
          throw new Error(this.formatMessage("'".concat(option, "' is not a valid top-level option.\n- Did you mean '").concat((0, _findSuggestion.findSuggestion)(option, validOptionNames), "'?")));
        }
      }
    }
  }, {
    key: "validateBooleanOption",
    value: function validateBooleanOption(name, value, defaultValue) {
      if (value === undefined) {
        return defaultValue;
      } else {
        this.invariant(typeof value === "boolean", "'".concat(name, "' option must be a boolean."));
      }
      return value;
    }
  }, {
    key: "validateStringOption",
    value: function validateStringOption(name, value, defaultValue) {
      if (value === undefined) {
        return defaultValue;
      } else {
        this.invariant(typeof value === "string", "'".concat(name, "' option must be a string."));
      }
      return value;
    }
  }, {
    key: "invariant",
    value: function invariant(condition, message) {
      if (!condition) {
        throw new Error(this.formatMessage(message));
      }
    }
  }, {
    key: "formatMessage",
    value: function formatMessage(message) {
      return "".concat(this.descriptor, ": ").concat(message);
    }
  }]);
}();
exports.OptionValidator = OptionValidator;